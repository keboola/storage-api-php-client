FORMAT: 1A
HOST: https://connection.keboola.com

# Storage API
Storage API provides an interface for sending data to Keboola Connection (KBC). The following are the most
important features of the API:
- Importing CSV data into Table Storage
- Exporting CSV data from Table Storage
- Loading arbitrary files into File Storage
- Managing tables including keys and indexes
- Managing buckets including sharing
- Managing component configurations

The CSV files interchanged with Storage must adhere to the
[RFC4180 Specification](http://tools.ietf.org/html/rfc4180) and must use the `UTF-8` encoding.
The files can be sent uncompressed or gzipped. You can find more information about working
with these files in [our manual](https://help.keboola.com/storage/tables/csv-files/).

For a list of available clients and their features, see the
[Developers Documentation](https://developers.keboola.com/integrate/storage/).
In it you will also find more complex examples of
[working with the API](https://developers.keboola.com/integrate/storage/api/).
This documentation assumes that you are already familiar with the
[Keboola Connection Storage component](https://help.keboola.com/storage/).

## HTTP Response Codes
The response from Storage API will have an
[HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) that will help
you determine if the request was successful. In case of an error, the HTTP status code
will help you determine the cause of the error. The status codes used by Storage API are
listed in the below tables.

### Success responses

<table>
    <tr>
        <td>200 <code>OK</code></td>
        <td>The request was successful.</td>
    </tr>
    <tr>
        <td>201 <code>Created</code></td>
        <td>The request was successful and a new resource was created.</td>
    </tr>
    <tr>
        <td>202 <code>Accepted</code></td>
        <td>Used for <a href='#introduction/synchronous-and-asynchronous-calls'>Asynchronous tasks</a>. A job resource is returned. The actual result must be obtained in another API call.</td>
    </tr>
    <tr>
        <td>204 <code>No Content</code></td>
        <td>The request was successful but there is nothing to return. Usually used as a response of DELETE requests.</td>
    </tr>
</table>

### Error responses
<table>
    <tr>
        <td>400 <code>Bad Request</code></td>
        <td>The request was invalid. Usually caused by invalid input data (missing arguments, invalid arguments values, etc.). The cause of the error is described in the response.</td>
    </tr>
    <tr>
        <td>401 <code>Unauthorized</code></td>
        <td>Authentication failed.</td>
    </tr>
    <tr>
        <td>403 <code>Forbidden</code></td>
        <td>You don't have access to the resource.</td>
    </tr>
    <tr>
        <td>404 <code>Not Found</code></td>
        <td>You're asking for something that doesn't exist.</td>
    </tr>
    <tr>
        <td>500 <code>Internal Server Error</code></td>
        <td>Something went wrong. We are sorry, it is our fault and we will make our best to fix it! Feel free to <a href='mailto:suppor@keboola.com'>send us a ticket.</a></td>
    </tr>
    <tr>
        <td>503 <code>Temporary Unavailable</code></td>
        <td>This response is typically returned when the system is under maintenance.
            The maintenance reason and expected maintenance end time are also returned in the response.
        </td>
    </tr>
</table>


## Authentication
Authentication is done via Storage API **Token**. There are multiple options
for [obtaining a Storage API Token](https://help.keboola.com/storage/tokens/).
The token must be sent as a value of the `X-StorageApi-Token` HTTP header with each API call.

Most API calls work within a *KBC Project*. The project is always derived from the token used for the API call.
So the token includes both authentication and authorization to a single project.

## Synchronous and Asynchronous Calls
Calls that represent potentially long-running actions are performed asynchronously.
These are for example: loading table data, snapshotting, exporting table data, table structure modifications, etc.
All asynchronous calls return the HTTP Response code `202` and a [Job Resource](#reference/jobs).
To obtain the actual result of the call, you have to monitor the job status by
[polling the Job Resource URL](https://developers.keboola.com/integrate/storage/api/import-export/#python-example).

## Partial Response
Some API calls that list objects are returning related resources by default. For example,
the [table list](#reference/tables/create-or-list-tables/tables-in-bucket) also returns
the table bucket properties and table attributes. You can use the `include` parameter
to return only the required resources in the response.

# Group Maintenance

## Maintenance Response Example [/v2/storage/]

### Example [GET]
In case the system, or a project is under maintenance, you will receive a response similar to the below one.
Maintenance typically applies to a single project, for example due to migration. Be sure to use the `Retry-After` header
when accessing the API programatically.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 503
    + Headers

            Content-type: application/json
            Retry-After: 559

    + Body

            {
                "status":"maintenance",
                "estimatedEndTime":"2013-05-25T10:30:44+02:00",
                "reason":"Thesystemisdownformaintenance",
            }


# Group Tokens and Permissions
When joining a project, each project administrator is assigned a [*master* token](https://help.keboola.com/storage/tokens/),
which enables them to create other tokens with limited privileges for buckets and components.

## Tokens Collection [/v2/storage/tokens]
### List all tokens [GET]
Lists all tokens in the project.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "id": "38",
                    "token": "9eabdd51eaab4040f952e0e6ae6eff03",
                    "description": "",
                    "created": "2012-11-13T16:49:28+0100",
                    "refreshed": "2017-11-13T16:48:28+0100",
                    "uri": "https://connection.keboola.com/v2/storage/tokens/38",
                    "isMasterToken": true,
                    "canManageBuckets": true,
                    "canManageTokens": false,
                    "canReadAllFileUploads": false,
                    "canPurgeTrash": false,
                    "canUseDirectAccess": false,
                    "expires": null,
                    "isExpired": false,
                    "isDisabled": false,
                    "dailyCapacity": 5,
                    "bucketPermissions": {
                        "in.c-main": "manage",
                        "out.c-main": "manage",
                        "in.c-ga": "manage"
                    }
                },
                {
                    "id": "40",
                    "token": "68ab920b621f159f72dcce4ae39a9a0d",
                    "description": "",
                    "created": "2012-11-13T16:49:28+0100",
                    "refreshed": "2017-11-13T16:48:28+0100",
                    "uri": "https://connection-devel.keboola.com/v2/storage/tokens/40",
                    "isMasterToken": false,
                    "canManageBuckets": false,
                    "canManageTokens": false,
                    "canReadAllFileUploads": false,
                    "canPurgeTrash": false,
                    "canUseDirectAccess": false,
                    "expires": null,
                    "isExpired": false,
                    "isDisabled": false,
                    "dailyCapacity": 5,
                    "creatorToken": {
                        "id": 1,
                        "description": "dev@keboola.com"
                    },
                    "bucketPermissions": {
                        "in.c-main": "read"
                    },
                    "componentAccess": [
                        "someComponentName"
                    ]
                }
            ]

### Create token [POST]
Creates a new token in the project. Note that it is not possible to create a new master token.

If your admin token does not have `canManageTokens` permission, you can only create temporary token with minimal privileges.
In this case, you are allowed to set the `description` and token expiration via `expiresIn` (required) parameter. All other attributes will be ignored.

+ Attributes
    + description (optional) - Token description
    + bucketPermissions[{id_bucket}] (optional) - Permissions for a bucket. Available permissions: `read`, `write`.
    + componentAccess[] (optional) - Grants access for component configurations. Allowed
    values are [valid component IDs](#reference/miscellaneous/api-index/get).
    + canManageBuckets (optional, boolean) - Allows full access to all buckets including newly created buckets.
    Overrides `bucketPermissions` settings.
        + Default: false
    + canReadAllFileUploads (optional, boolean) - Allows access to all file uploads. When set to false,
    only files uploaded by the current token are accessible.
        + Default: false
    + canPurgeTrash (optional, boolean) - Allows permanently remove deleted configurations.
        + Default: false
    + expiresIn (optional, number) - Number of seconds until the token expires. If not provided, the token never expires.

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            description=my-new-token&bucketPermissions[in.c-main]=read&componentAccess[]=keboola.ex-db-mysql&expiresIn=60

+ Response 201 (application/json)
    + Body

            {
                "id": "484",
                "token": "75-12d4bfa4995694a1c956e7bb1eea0df5cc53acdb",
                "created": "2017-11-13T16:48:28+0100",
                "refreshed": "2017-11-13T16:48:28+0100",
                "description": "my-new-token",
                "uri": "https://connection.keboola.com/v2/storage/tokens/484",
                "isMasterToken": false,
                "canManageBuckets": false,
                "canManageTokens": false,
                "canReadAllFileUploads": false,
                "canPurgeTrash": false,
                "canUseDirectAccess": false,
                "expires": null,
                "isExpired": false,
                "isDisabled": false,
                "dailyCapacity": 5,
                "creatorToken": {
                    "id": 1,
                    "description": "dev@keboola.com"
                },
                "bucketPermissions": {
                    "in.c-main": "read"
                },
                "componentAccess": [
                    "keboola.ex-db-mysql"
                ],
                "expires": "2012-11-13T16:49:28+0100",
                "isExpired": false,
                "isDisabled": false,
                "dailyCapacity": 5
            }

## Token [/v2/storage/tokens/{id_token}]
### Token detail [GET]
Returns all properties of a token. You can obtain the Token Id, for example, using
the [Verify call](#reference/tokens-and-permissions/token/token-verification).

+ Parameters
    + id_token (required, number) - Token Id

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "id": "44",
                "token": "bdc4ce6a0ea85a2f4313b5b0b1800df3",
                "description": "",
                "created": "2017-11-13T16:48:28+0100",
                "refreshed": "2017-11-13T16:48:28+0100",
                "uri": "https://connection-devel.keboola.com/v2/storage/tokens/44",
                "isMasterToken": false,
                "canReadAllFileUploads": false,
                "canPurgeTrash": false,
                "canUseDirectAccess": false,
                "expires": null,
                "isExpired": false,
                "isDisabled": false,
                "dailyCapacity": 5,
                "creatorToken": {
                    "id": 1,
                    "description": "dev@keboola.com"
                },
                "bucketPermissions": [],
                "owner": {
                    "name": "Buckets 5",
                    "id": "58"
                }
            }


### Update Token [PUT]
Updates Token properties. Beware that all current bucket permissions are replaced. If you want to add new
bucket permissions, don't forget to specify the previous permissions.

+ Attributes
    + description (required) - Token description
    + bucketPermissions[{id_bucket}] (optional) - Permissions for the bucket. Available permissions: `read`, `write`.
    + componentAccess[] (optional) - Grants access for component configurations. Allowed
    values are [valid component IDs](#reference/miscellaneous/api-index/get).
    + canReadAllFileUploads (optional, boolean) - Allows access to all file uploads. When set to false,
    only files uploaded by the current token are accessible.
        + Default: false
    + canPurgeTrash (optional, boolean) - Allows permanently remove deleted configurations.
        + Default: false

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            description=New Description&bucketPermissions[in.c-main]=write

+ Response 200 (application/json)
    + Body

            {
                "id": "67319",
                "token": "578-67319-460300c259ec3fcba4b95d1d5c14a8419268bc2b",
                "created": "2017-02-13T10:27:50+0100",
                "refreshed": "2017-11-13T16:48:28+0100",
                "description": "new-description",
                "uri": "https://connection.keboola.com/v2/storage/tokens/67319",
                "isMasterToken": false,
                "canManageBuckets": false,
                "canManageTokens": false,
                "canReadAllFileUploads": false,
                "canPurgeTrash": false,
                "canUseDirectAccess": false,
                "expires": null,
                "isExpired": false,
                "isDisabled": false,
                "dailyCapacity": 5,
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "componentAccess": [],
                "bucketPermissions": {
                    "in.c-main": "write"
                }
            }

## Token Verification [/v2/storage/tokens/verify]
### Token verification [GET]
Checks the token privileges and returns information about the project to which the token belongs (`owner`)
and the associated administrator (`admin`). This call can be executed by all tokens.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "id": "44",
                "token": "your_token",
                "description": "",
                "created": "2017-02-13T10:27:50+0100",
                "refreshed": "2017-11-13T16:48:28+0100",
                "uri": "https://connection-devel.keboola.com/v2/storage/tokens/44",
                "isMasterToken": false,
                "canReadAllFileUploads": false,
                "canPurgeTrash": false,
                "canUseDirectAccess": false,
                "expires": null,
                "isExpired": false,
                "isDisabled": false,
                "dailyCapacity": 5,
                "creatorToken": {
                    "id": 1,
                    "description": "dev@keboola.com"
                },
                "bucketPermissions": [],
                "componentPermissions": [],
                "owner": {
                    "name": "Buckets 5",
                    "id": "58",
                    "limits": {
                            "components.jobsParallelism": {
                                "name": "components.jobsParallelism",
                                "value": 10
                            },
                            "goodData.dataSizeBytes": {
                                "name": "goodData.dataSizeBytes",
                                "value": 1000000000
                            },
                            "goodData.demoTokenEnabled": {
                                "name": "goodData.demoTokenEnabled",
                                "value": 1
                            },
                            "goodData.prodTokenEnabled": {
                                "name": "goodData.prodTokenEnabled",
                                "value": 1
                            },
                            "goodData.usersCount": {
                                "name": "goodData.usersCount",
                                "value": 30
                            },
                            "kbc.adminsCount": {
                                "name": "kbc.adminsCount",
                                "value": 10
                            },
                            "kbc.extractorsCount": {
                                "name": "kbc.extractorsCount",
                                "value": 0
                            },
                            "kbc.writersCount": {
                                "name": "kbc.writersCount",
                                "value": 0
                            },
                            "orchestrations.count": {
                                "name": "orchestrations.count",
                                "value": 10
                            },
                            "storage.dataSizeBytes": {
                                "name": "storage.dataSizeBytes",
                                "value": 50000000000
                            },
                            "storage.jobsParallelism": {
                                "name": "storage.jobsParallelism",
                                "value": 10
                            }
                        },
                        "metrics": {
                            "goodData.dataSizeBytes": {
                                "name": "goodData.dataSizeBytes",
                                "value": 3589276
                            },
                            "goodData.rowsCount": {
                                "name": "goodData.rowsCount",
                                "value": 23898
                            },
                            "goodData.usersCount": {
                                "name": "goodData.usersCount",
                                "value": 0
                            },
                            "storage.dataSizeBytes": {
                                "name": "storage.dataSizeBytes",
                                "value": 3019882496
                            },
                            "storage.rowsCount": {
                                "name": "storage.rowsCount",
                                "value": 3316230
                            }
                        }
                }
            }

## Share Token [/v2/storage/tokens/{token_id}/share]
### Share Token [POST]
Use this call whenever you want to securely deliver a token to someone. The link to the token retrieval page will be sent to the
provided email address. The link will expire in 2 hours.

+ Parameters
    + token_id (required, number) - Token Id

+ Attributes
    + recipientEmail (required) - Recipient's email address
    + message (required) - Message for the token recipient

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            recipientEmail=martin@keboola.com&message=Hi

+ Response 204

## Token Refresh [/v2/storage/tokens/{id_token}/refresh]
### Refresh Token [POST]
Use this method to generate a new token value; the old token value will become immediately invalid.
This method can be executed by all tokens.

+ Parameters
    + id_token - A valid token id. You can get it from [Verify call](#reference/tokens-and-permissions/token/token-verification).

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "id": "48",
                "token": "new_token",
                "description": "Master Token",
                "created": "2017-02-13T10:27:50+0100",
                "refreshed": "2017-11-13T16:48:28+0100",
                "uri": "https://connection-devel.keboola.com/v2/storage/tokens/id_token",
                "isMasterToken": false,
                "canReadAllFileUploads": false,
                "canPurgeTrash": false,
                "canUseDirectAccess": false,
                "expires": null,
                "isExpired": false,
                "isDisabled": false,
                "dailyCapacity": 5,
                "creatorToken": {
                    "id": 1,
                    "description": "dev@keboola.com"
                },
                "bucketPermissions": {
                    "in.c-main": "manage",
                    "out.c-main": "manage",
                    "in.c-twitter": "manage"
                }
            }

# Group Miscellaneous
## API Index [/v2/storage]
### Component List [GET]
Use this API call to obtain definitions of all components and services available in KBC. For more information about
the KBC Component architecture, see the [Developers documentation](https://developers.keboola.com/overview/).

+ Response 200 (application/json)
    + Body

            {
                "api": "storage",
                "documentation": "http://docs.keboola.apiary.io/",
                "version": "v2",
                "components": [
                    {
                        "id": "orchestrator-2",
                        "uri": "https://orchestrator-2.keboola.com/"
                    },
                    {
                        "id": "transformation",
                        "uri": "https://transformation.keboola.com/"
                    }
                ],
                "services": [
                    {
                        "id": "docker-runner",
                        "url": "https:\/\/docker-runner.keboola.com"
                    },
                    {
                        "id": "import",
                        "url": "https:\/\/import.keboola.com"
                    },
                    {
                        "id": "syrup",
                        "url": "https:\/\/syrup.keboola.com"
                    }
                ],
                "urlTemplates": {
                    "orchestrationJob": "\/admin\/projects\/&&projectId&&\/orchestrations\/&&orchestrationId&&\/jobs\/&&jobId&&"
                }
            }

# Group Buckets
[Buckets](https://help.keboola.com/storage/buckets/) are containers for one or more data tables.
Access to buckets can be limited by access tokens. Each bucket has a *backend* in which all tables are created:
- Snowlake (default)
- Redshift

## Create or List Buckets [/v2/storage/buckets]
### List all buckets [GET /v2/storage/buckets?include={include}]

All buckets with their attributes are returned.

+ Parameters
    + include (optional) - Comma-separated list of resources to include for each table. Available resources: 'attributes, metadata, linkedBuckets'.
        + Default: 'attributes'

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-main",
                    "id": "in.c-main",
                    "name": "c-main",
                    "displayName": "main",
                    "stage": "in",
                    "description": "Main user storage",
                    "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-main/tables",
                    "backend": "snowflake"
                    "linkedBy": [
                        {
                            "id": "in.c-linked-bucket",
                            "created": "2017-02-13T12:01:05+0100",
                            "project": {
                                "id": 321,
                                "name": "Some Project"
                            }
                        }, {
                            "id": "in.c-another-linked-bucket",
                            "created": "2017-02-13T12:01:05+0100",
                            "project": {
                                "id": 322,
                                "name": "Some Other Project"
                            }
                        }
                    ]
                },
                {
                    "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-organizationData",
                    "id": "in.c-organizationData",
                    "name": "c-organizationData",
                    "displayName": "organization",
                    "stage": "in",
                    "description": "Source bucket description",
                    "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-organizationData/tables",
                    "backend": "snowflake",
                    "isReadonly": true,
                    "sourceBucket": {
                        "id": "in.c-main",
                        "name": "c-main",
                        "description": "Organization shared data"
                        "project": {
                            "id": 123,
                            "name": "Project name"
                        }
                    }
                }
            ]

### Create Bucket [POST]
Using this API call, you can either create a new bucket in the project, or you can link an
existing bucket from another project (see below).

+ Attributes
    + name (required) - New bucket name; only alphanumeric characters and underscores are allowed.
    + stage (optional, enum[string]) - Assigns the bucket to one of the stages.
        + Members
            + in
            + out
        + Default: in
    + description (optional) - Bucket description.
    + backend (optional, enum[string]) - Bucket backend type; the default value is determined by the project settings.
        + Members
            + snowflake
            + redshift
    + displayName (optional) - Bucket displayName, this name is displayed in UI and can be changed anytime; only alphanumeric characters,underscores and dashes are allowed.

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            name=my-new-bucket&stage=in&description=Some Description

+ Response 201 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-my-new-bucket",
                "id": "in.c-my-new-bucket",
                "name": "c-my-new-bucket",
                "displayName": "my-new-bucket",
                "stage": "in",
                "description": "Some Description",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-my-new-bucket/tables",
                "created": "2017-02-13T12:01:05+0100",
                "lastChangeDate": null,
                "isReadOnly": false,
                "dataSizeBytes": 0,
                "rowsCount": 0,
                "isMaintenance": false,
                "backend": "snowflake",
                "sharing": null,
                "directAccessEnabled": false,
                "directAccessSchemaName": null,
                "attributes": []
            }

### Link Shared Bucket [POST]
Use this API call to create a new bucket which contains contents of a
[shared bucket](https://help.keboola.com/storage/buckets/sharing/) in a source project.
Linking a bucket from another project is only possible if it has been
[enabled](#reference/buckets/bucket-sharing/share-bucket) in the source project.

+ Attributes
    + name (required) - New bucket name; only alphanumeric characters and underscores are allowed.
    + sourceProjectId (required, number) - Id of the source project from which the bucket is being shared
    + sourceBucketId (required) - Id of the bucket being shared
    + stage (optional, enum[string]) - Assigns the bucket to one of the stages.
        + Members
            + in
            + out
        + Default: in

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            name=organizationData&stage=in&sourceProjectId=123&sourceBucketId=in.c-shared-bucket

+ Response 201 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-organizationData",
                "id": "in.c-organizationData",
                "name": "c-organizationData",
                "displayName": "organizationData",
                "stage": "in",
                "description": "Source bucket description",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-organizationData/tables",
                "backend": "snowflake",
                "isReadonly": true,
                "sourceBucket": {
                    "id": "in.c-shared-bucket",
                    "name": "c-shared-bucket",
                    "description": "Organization shared data"
                    "project": {
                        "id": 123,
                        "name": "Project name"
                    }
                }
            }

## Manage Bucket [/v2/storage/buckets/{bucket_id}]
### Bucket Detail [GET]
Obtains information about a bucket.

+ Parameters
    + bucket_id (required) - Bucket Id

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-ga",
                "id": "in.c-ga",
                "name": "c-ga",
                "displayName": "ga",
                "stage": "in",
                "description": "Google Analytics",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-ga/tables",
                "backend": "snowflake",
                "linkedBy": [
                    {
                        "id": "in.c-linked-bucket",
                        "created": "2017-02-13T12:01:05+0100",
                        "project": {
                            "id": 321,
                            "name": "Some Project"
                        }
                    }, {
                        "id": "in.c-another-linked-bucket",
                        "created": "2017-02-13T12:01:05+0100",
                        "project": {
                            "id": 322,
                            "name": "Some Other Project"
                        }
                    }
                ]
            }

### Bucket Update [PUT /v2/storage/buckets/{bucket_id}/?async={async}]
Update an existing bucket

+ Parameters
    + bucket_id (required) - Bucket Id
    + async (optional, boolean) - Updates the bucket in a background job. This is useful if updates takes too much time and times out.

+ Attributes
    + displayName (required, string) - Bucket displayName, this name is displayed in UI and can be changed anytime; only alphanumeric characters,underscores and dashes are allowed.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
Synchronous call response (async=false)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket",
                "id": "in.c-my-bucket",
                "name": "c-my-bucket",
                "displayName": "my-display-name-for-bucket",
                "stage": "in",
                "description": "Some Description",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket/tables",
                "created": "2017-02-13T12:01:05+0100",
                "lastChangeDate": null,
                "isReadOnly": false,
                "dataSizeBytes": 0,
                "rowsCount": 0,
                "isMaintenance": false,
                "backend": "snowflake",
                "sharing": null,
                "directAccessEnabled": false,
                "directAccessSchemaName": null
            }
+ Response 202

Asynchronous call response (async=true) that creates a new job. To see job detail use [Job Detail API endpoint](#reference/jobs/manage-jobs/job-detail)
    + Body

            {
                "id": 11,
                "status": "waiting",
                "url": "https://connection.keboola.com/v2/storage/jobs/11",
                "operationName": "bucketDelete",
                "operationParams": {
                    "params": {
                        "idBucket": 123,
                        "force": true
                    }
                },
                "createdTime": "2013-05-31T16:11:05+0200",
                "startTime": null,
                "endTime": null,
                "runId": null,
                "results": null,
                "creatorToken": {
                    "id": "27978",
                    "description": "ondrej.popelka@keboola.com"
                },
                "metrics": {
                    "inCompressed": false,
                    "inBytes": 0,
                    "inBytesUncompressed": 0,
                    "outCompressed": false,
                    "outBytes": 0,
                    "outBytesUncompressed": 0
                }
            }

### Drop Bucket [DELETE /v2/storage/buckets/{bucket_id}/?force={force}&async={async}]
Deletes a bucket from the project. In the default mode, only empty buckets can be deleted.
Use the optional `force` parameter to delete all bucket content too.

+ Parameters
    + bucket_id (required) - Bucket Id
    + force (optional, boolean) - Drops all tables and aliases. Tables must not have any dependencies (aliases, etc.).
    + async (optional, boolean) - Drops the bucket in a background job. This is useful if dropping takes too much time and times out.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204
Synchronous call response (async=false)
    + Body

+ Response 202
Asynchronous call response (async=true) that creates a new job. To see job detail use [Job Detail API endpoint](#reference/jobs/manage-jobs/job-detail)
    + Body

            {
                "id": 11,
                "status": "waiting",
                "url": "https://connection.keboola.com/v2/storage/jobs/11",
                "operationName": "bucketDelete",
                "operationParams": {
                    "params": {
                        "idBucket": 123,
                        "force": true
                    }
                },
                "createdTime": "2013-05-31T16:11:05+0200",
                "startTime": null,
                "endTime": null,
                "runId": null,
                "results": null,
                "creatorToken": {
                    "id": "27978",
                    "description": "ondrej.popelka@keboola.com"
                },
                "metrics": {
                    "inCompressed": false,
                    "inBytes": 0,
                    "inBytesUncompressed": 0,
                    "outCompressed": false,
                    "outBytes": 0,
                    "outBytesUncompressed": 0
                }
            }

## Bucket Sharing [/v2/storage/buckets/{bucket_id}/share]


### Share Bucket [POST]
[Enables sharing](https://help.keboola.com/storage/buckets/sharing/) of a bucket. The bucket will be shared
to the entire organization to which the project belongs. It may then be shared to any project of that organization.
This operations is available only for organization administrators.


+ Parameters
    + bucket_id (required) - Bucket Id

+ Attributes
    + sharing (optional, enum[string]) - Sharing type
        + Members
            + `organization` - Bucket is shared to organization. Any organization member will be able to link to this bucket from any project within the organization.
            + `organization-project` - Bucket is shared to organization. Any member of a project within the organization will be able to link to this bucket from their project.
        + Default: organization

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 202 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket",
                "id": "in.c-my-bucket",
                "name": "c-my-bucket",
                "displayName": "my-bucket",
                "stage": "in",
                "description": "Some Description",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket/tables",
                "created": "2017-02-13T12:01:05+0100",
                "lastChangeDate": null,
                "isReadOnly": false,
                "dataSizeBytes": 0,
                "rowsCount": 0,
                "isMaintenance": false,
                "backend": "snowflake",
                "sharing": "organization",
                "directAccessEnabled": false,
                "directAccessSchemaName": null
            }

### Share Bucket To Organization [POST /v2/storage/buckets/{bucket_id}/share-organization]
[Enables sharing](https://help.keboola.com/storage/buckets/sharing/) or **update sharing** for this bucket within the organization.
Any organization member will be able to link to this bucket from any project within the organization.
This operations is available only for organization administrators.
+ Parameters
    + bucket_id (required) - Bucket Id

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 201 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket",
                "id": "in.c-my-bucket",
                "name": "c-my-bucket",
                "displayName": "my-bucket",
                "stage": "in",
                "description": "Some Description",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket/tables",
                "created": "2017-02-13T12:01:05+0100",
                "lastChangeDate": null,
                "isReadOnly": false,
                "dataSizeBytes": 0,
                "rowsCount": 0,
                "isMaintenance": false,
                "backend": "snowflake",
                "sharing": "organization",
                "sharingParameters": [],
                "sharedBy": {
                    "id": 5,
                    "name": "dev@keboola.com",
                    "date": "2020-02-03T14:58:29+0100"
                },
                "directAccessEnabled": false,
                "directAccessSchemaName": null
            }

### Share Bucket To Organization Project [POST /v2/storage/buckets/{bucket_id}/share-organization-project]
[Enables sharing](https://help.keboola.com/storage/buckets/sharing/) or **update sharing** for this bucket within the organization.
Any member of a project within the organization will be able to link to this bucket from their project.
This operations is available only for organization administrators.
+ Parameters
    + bucket_id (required) - Bucket Id

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 201 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket",
                "id": "in.c-my-bucket",
                "name": "c-my-bucket",
                "displayName": "my-bucket",
                "stage": "in",
                "description": "Some Description",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket/tables",
                "created": "2017-02-13T12:01:05+0100",
                "lastChangeDate": null,
                "isReadOnly": false,
                "dataSizeBytes": 0,
                "rowsCount": 0,
                "isMaintenance": false,
                "backend": "snowflake",
                "sharing": "organization-project",
                "sharingParameters": [],
                "sharedBy": {
                    "id": 5,
                    "name": "dev@keboola.com",
                    "date": "2020-02-03T14:58:29+0100"
                },
                "directAccessEnabled": false,
                "directAccessSchemaName": null
            }

### Share Bucket To Projects [POST /v2/storage/buckets/{bucket_id}/share-to-projects]
[Enables sharing](https://help.keboola.com/storage/buckets/sharing/) or **update sharing** for this bucket to a specific set of projects in the organization.
All users who are member of one of the targeted projects will be able to link to this bucket from that specific project.
This operations is available only for organization administrators.

+ Parameters
    + bucket_id (required) - Bucket Id

+ Attributes
    + targetProjectIds[] (required, array) - array of projects id

+ Request
    + Headers

            X-StorageApi-Token: your_token
    + Body

            targetProjectIds%5B0%5D=1&targetProjectIds%5B1%5D=2&targetProjectIds%5B2%5D=3

+ Response 201 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-main",
                "id": "in.c-main",
                "name": "c-main",
                "displayName": "main",
                "stage": "in",
                "description": "Main user storage",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-main/tables",
                "created": "2019-09-25T17:45:11+0200",
                "lastChangeDate": null,
                "isReadOnly": false,
                "dataSizeBytes": 0,
                "rowsCount": 0,
                "isMaintenance": false,
                "backend": "snowflake",
                "sharing": "specific-project",
                "sharingParameters": {
                    "projects": [
                           {
                                   "id": 1,
                                   "name": "Project 1"
                           },
                           {
                                   "id": 2,
                                   "name": "Project 2"
                           },
                           {
                                   "id": 3,
                                   "name": "Project 3"
                           }
                    ]
                },
                "sharedBy": {
                    "id": 5,
                    "name": "dev@keboola.com",
                    "date": "2020-02-03T14:58:29+0100"
                },
                "directAccessEnabled": false,
                "directAccessSchemaName": null
            }

### Share Bucket To Users [POST /v2/storage/buckets/{bucket_id}/share-to-users]
[Enables sharing](https://help.keboola.com/storage/buckets/sharing/) or **update sharing** for this bucket to a specific set of users in the organization.
All users who are included in the targetUsers array will be able to link to this bucket.
This operations is available only for organization administrators.

+ Parameters
    + bucket_id (required) - Bucket Id

+ Attributes
    + targetUsers[] (required, array) - array of users id or user emails. Users must be member of at least one project in the organization.

+ Request
    + Headers

            X-StorageApi-Token: your_token
    + Body

            targetUsers%5B0%5D=dev%40keboola.com&targetUsers%5B1%5D=dev2%40keboola.com&targetUsers%5B2%5D=dev3%40keboola.com

+ Response 201 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-main",
                "id": "in.c-main",
                "name": "c-main",
                "displayName": "main",
                "stage": "in",
                "description": "Main user storage",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-main/tables",
                "created": "2019-09-25T17:45:11+0200",
                "lastChangeDate": null,
                "isReadOnly": false,
                "dataSizeBytes": 0,
                "rowsCount": 0,
                "isMaintenance": false,
                "backend": "snowflake",
                "sharing": "specific-users",
                "sharingParameters": {
                    "users": [
                           {
                                   "id": 1,
                                   "name": "User Name",
                                   "email": "dev@keboola.com"
                           },
                           {
                                   "id": 2,
                                   "name": "User Name",
                                   "email": "dev2@keboola.com"
                           },
                           {
                                   "id": 3,
                                   "name": "User Name",
                                   "email": "dev3@keboola.com"
                           }
                    ]
                },
                "sharedBy": {
                    "id": 5,
                    "name": "dev@keboola.com",
                    "date": "2020-02-03T14:58:29+0100"
                },
                "directAccessEnabled": false,
                "directAccessSchemaName": null
            }

### Change Bucket Sharing [PUT]
Change [sharing type](https://help.keboola.com/storage/buckets/sharing/#sharing-type) of a bucket.
This operations is available only for organization administrators.


+ Parameters
    + bucket_id (required) - Bucket Id

+ Attributes
    + sharing (required, enum[string]) - Sharing type
        + Members
            + `organization` - Bucket is shared to organization. Any organization member will be able to link to this bucket from any project within the organization.
            + `organization-project` - Bucket is shared to organization. Any member of a project within the organization will be able to link to this bucket from their project.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket",
                "id": "in.c-my-bucket",
                "name": "c-my-bucket",
                "displayName": "my-bucket",
                "stage": "in",
                "description": "Some Description",
                "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-my-bucket/tables",
                "created": "2017-02-13T12:01:05+0100",
                "lastChangeDate": null,
                "isReadOnly": false,
                "dataSizeBytes": 0,
                "rowsCount": 0,
                "isMaintenance": false,
                "backend": "snowflake",
                "sharing": "organization",
                "sharingParameters": [],
                "sharedBy": {
                    "id": 5,
                    "name": "dev@keboola.com",
                    "date": "2020-02-03T14:58:29+0100"
                },
                "directAccessEnabled": false,
                "directAccessSchemaName": null
            }

### Stop Bucket Sharing [DELETE]
Disables sharing of a bucket. A bucket must not be linked to other projects.
To unshare an already linked bucket, you have to delete the links first - use the
[Drop Bucket](#reference/buckets/manage-bucket/drop-bucket) in the linking project.
This operations is available only for organization administrators.

+ Parameters
    + bucket_id (required) - Bucket Id

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204

## List Shared Buckets [/v2/storage/shared-buckets?include={include}]
Lists buckets which may be shared to the project.

### Shared buckets list [GET]

+ Parameters
    + include (optional) - Comma-separated list of resources to include for each table. Available resources: 'metadata'.
        + Default: ''

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "id": "in.c-main",
                    "name": "c-main",
                    "displayName": "main",
                    "stage": "in",
                    "description": "Organization shared data"
                    "sharing": "organization-project",
                    "created": "2020-01-12T18:28:31+0100",
                    "lastChangeDate": "2020-01-12T18:31:49+0100",
                    "dataSizeBytes": 1536,
                    "rowsCount": 32,
                    "backend": "snowflake",
                    "project": {
                        "id": 123,
                        "name": "Project name"
                    },
                    "tables": [
                        {
                            "id": "in.c-main.languages",
                            "name": "languages"
                            "displayName": "languages-display-name"
                        }
                    ],
                    "sharingParameters": [],
                    "sharedBy": {
                        "id": 5,
                        "name": "dev@keboola.com",
                        "date": "2020-02-03T14:58:29+0100"
                    }
                }
            ]

# Group Tables

## Create or List Tables [/v2/storage/buckets/{bucket_id}/tables]

### Create new table from CSV file [POST]

Creates a new table in a bucket. The CSV file must follow the [RFC 4180 Specification](https://tools.ietf.org/html/rfc4180).
More information about the requirements can be found in the [Manual](https://help.keboola.com/storage/tables/csv-files/).
Column names are extracted from the CSV file header; spaces and any other special characters in column names are
replaced with an underscore. This API call should be used only for tables which can be safely transferred in a single HTTP request; for large
tables use the [asynchronous call](#reference/tables/create-table-asynchronously/create-new-table-from-csv-file-asynchronously).

+ Parameters
    + bucket_id (required) - Bucket Id

+ Attributes
    + name (required) - New table name
    + data (required) - CSV file containing data for import. The data have to be encoded in **UTF-8**. The file can be raw or gzipped. Gzipped files must have the extension `.gz`.
    + delimiter (optional) - Field delimiter used in the CSV file. The default value is ','.  Use '\t' or type the char for the tabulator.
    + enclosure (optional) - Field enclosure used in the CSV file. The default value is '"'. (Note: you can specify either `enclosure` or `escapedBy` parameter, not both.)
    + escapedBy (optional) - Escape character used in the CSV file. The default value is an empty value - no escape character is used. (Note: you can specify either `enclosure` or `escapedBy` parameter, not both.)
    + primaryKey (optional) - Primary key of the table. If the primary key is set, updates can be done on the table. See the CSV incremental import. The primary key can be also composed by multiple columns; the columns must be separated by a comma.

+ Request (multipart/form-data)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            ------WebKitFormBoundaryqPuY88H6m4oIp6zq
            Content-Disposition: form-data; name="name"
            my_table_name
            ------WebKitFormBoundaryqPuY88H6m4oIp6zq
            Content-Disposition: form-data; name="data"; filename="my_table_name.csv"
            Content-Type: application/octet-stream
            file_content
            ------WebKitFormBoundaryqPuY88H6m4oIp6zq
            Content-Disposition: form-data; name="delimiter"
            ,
            ------WebKitFormBoundaryqPuY88H6m4oIp6zq
            Content-Disposition: form-data; name="enclosure"
            "
            ------WebKitFormBoundaryqPuY88H6m4oIp6zq--

+ Response 201 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/tables/in.c-main.languages",
                "id": "in.c-main.languages",
                "name": "languages",
                "displayName": "languages-displayName",
                "gdName": "languages",
                "created": "2012-07-23 09:51:45",
                "lastImportDate": null,
                "columns": [
                    "id",
                    "name_id",
                    "nm_id"
                ],
                "indexedColumns": [
                    "id"
                ],
                "bucket": {
                    "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-main",
                    "id": "in.c-main",
                    "name": "c-main",
                    "displayName": "main",
                    "stage": "in",
                    "description": "Main user storage",
                    "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-main/tables"
                }
            }

### Tables in bucket [GET /v2/storage/buckets/{bucket_id}/tables?include={include}]
Lists tables in a given bucket.

+ Parameters
    + bucket_id (required) - Bucket Id
    + include (optional, enum[string]) - Comma-separated list of resources to include for each table
        + Members
            + attributes
            + columns
            + metadata
            + columnMetadata
        + Default: attributes,metadata

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "uri": "https://connection.keboola.com/v2/storage/tables/in.c-keboola-ex-db-snowflake-528221294.datatypes",
                    "id": "in.c-keboola-ex-db-snowflake-528221294.datatypes",
                    "name": "datatypes",
                    "transactional": false,
                    "primaryKey": [],
                    "indexedColumns": [],
                    "created": "2019-08-12T14:36:00+0200",
                    "lastImportDate": "2019-08-12T21:16:41+0200",
                    "lastChangeDate": "2019-08-12T21:16:41+0200",
                    "rowsCount": 2,
                    "dataSizeBytes": 1024,
                    "isAlias": false,
                    "isAliasable": true,
                    "metadata": [
                        {
                            "id": "206180828",
                            "key": "KBC.createdBy.component.id",
                            "value": "keboola.ex-db-snowflake",
                            "provider": "system",
                            "timestamp": "2019-08-12T14:36:08+0200"
                        }
                    ],
                    "columnMetadata": {
                        "ID": [
                            {
                                "id": "206180838",
                                "key": "KBC.datatype.type",
                                "value": "NUMBER",
                                "provider": "keboola.ex-db-snowflake",
                                "timestamp": "2019-08-12T14:36:17+0200"
                            }
                        ]
                    }
                },
                {
                    "uri": "https://connection.keboola.com/v2/storage/tables/in.c-keboola-ex-db-snowflake-528221294.datatypes-alias",
                    "id": "in.c-keboola-ex-db-snowflake-528221294.datatypes-alias",
                    "name": "datatypes-alias",
                    "transactional": false,
                    "primaryKey": [],
                    "indexedColumns": [],
                    "created": "2019-08-14T11:43:17+0200",
                    "lastImportDate": "2019-08-12T21:16:41+0200",
                    "lastChangeDate": "2019-08-12T21:16:41+0200",
                    "rowsCount": 2,
                    "dataSizeBytes": 1024,
                    "isAlias": true,
                    "isAliasable": true,
                    "sourceTable": {
                        "id": "in.c-keboola-ex-db-snowflake-528221294.datatypes",
                        "uri": "https://connection.keboola.com/v2/storage/tables/in.c-keboola-ex-db-snowflake-528221294.datatypes",
                        "project": {
                            "id": 578,
                            "name": "Some source project"
                        },
                        "columnMetadata": {
                            "ID": [
                                {
                                    "id": "206180838",
                                    "key": "KBC.datatype.type",
                                    "value": "NUMBER",
                                    "provider": "keboola.ex-db-snowflake",
                                    "timestamp": "2019-08-12T14:36:17+0200"
                                }
                            ]
                        }
                    },
                    "aliasColumnsAutoSync": true,
                    "metadata": [],
                    "columnMetadata": []
                }
            ]


## Create Table Asynchronously [/v2/storage/buckets/{bucket_id}/tables-async]

### Create new table from CSV file asynchronously [POST]

The method of creating a table asynchronously should be used for larger imports (everything with 100 lines and more).
The create request is created and added to a queue, the job resource url for status polling is returned.
The actual data must be provided in one of the following attributes:

- `dataFileId`,
- `snapshotId`,
- `dataWorkspaceId` and `dataTableName`
- `sourceTableId`

+ Parameters
    + bucket_id (required) - The bucket Id

+ Attributes
    + name (required) - New table name
    + dataFileId (optional) - Id of the file stored in [File Uploads](#reference/files)
    + snapshotId (optional) - Id of a table snapshot - a table will be created from the snapshot.
    + dataWorkspaceId (optional) - Load from the table [workspace](#reference/workspaces). Use with the **dataTableName** attribute.
    + dataTableName (optional) - Load from a table in [workspace](#reference/workspaces).
    + sourceTableId (optional) - Create time travel snapshot of this table.
    + timestamp (optional) - Datetime string to be used for the time travel snapshot. Use with the **sourceTableId** attribute. The preferred format is `YYYY-MM-DD hh:mm:ss Z`, other formats may also work, but time zone is required.
    + delimiter (optional) - Field delimiter used in the CSV file. The default value is ','.  Use '\t' or type the tab char for the tabulator.
    + enclosure (optional) - Field enclosure used in the CSV file. The default value is '"'. (Note: you can specify either the `enclosure` or `escapedBy` parameter, not both.)
    + escapedBy (optional) - Escape character used in the CSV file. The default value is an empty value - no escape character is used. (Note: you can specify either the `enclosure` or `escapedBy` parameter, not both.)
    + primaryKey (optional) - Primary key of a table. If the primary key is set, updates can be done on the table. See CSV incremental import. The primary key can be also composed by multiple columns; the columns must be separated by a comma.

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            name=table_name&dataFileId=234&delimiter=%2C&enclosure=%22

+ Response 202 (application/json)

        {
            "id": 11,
            "status": "waiting",
            "url": "https://connection.keboola.com/v2/storage/jobs/11",
            "operationName": "tableCreate",
            "operationParams": {
                "params": {
                    "enclosure": "\"",
                    "delimiter": ",",
                    "escapedBy": "",
                },
                "source": {
                    "fileId": "234",
                    "type": "file"
                }
            },
            "createdTime": "2013-05-31T16:11:05+0200",
            "startTime": null,
            "endTime": null,
            "runId": null,
            "results": null,
            "creatorToken": {
                "id": "27978",
                "description": "ondrej.popelka@keboola.com"
            },
            "metrics": {
                "inCompressed": false,
                "inBytes": 0,
                "inBytesUncompressed": 0,
                "outCompressed": false,
                "outBytes": 0,
                "outBytesUncompressed": 0
            }
        }


## Load Data [/v2/storage/tables/{table_id}/import]

### Load data from csv file to prepared table [POST]

 **This method of import is DEPRECATED**, please use [asynchronous import](#reference/tables/load-data-asynchronously).

 Each CSV table should contain a header with column names; all columns present in the table must be also present in the CSV file, new columns not present in the table are created. One of the `data` and `dataString`  attributes must be provided.
 The CSV file can be raw or gzipped. Gzipped files must have the extension .gz.

+ Attributes
    + data (optional) - Multipart CSV file upload
    + dataString (optional) - CSV as a string in the request body
    + incremental (optional) - If incremental is set to 0, the target table is truncated before each import. Default is 0.
    + delimiter (optional) - Field delimiter used in the CSV file. The default value is ','.  Use '\t' or type the tab char for the tabulator.
    + enclosure (optional) - Field enclosure used in the CSV file. The default value is '"'.
    + columns[] (optional) - List of columns present in the CSV file; the first line of the file will not be treated as a header!
    + withoutHeaders (optional, boolean) - The CSV file doesn't contain headers, columns are matched by their order. If this option is used, columns option is ignored.


+ Request (multipart/form-data; boundary=----WebKitFormBoundaryU2xN082HVaIRptvd)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            ------WebKitFormBoundaryU2xN082HVaIRptvd
            Content-Disposition: form-data; name="incremental"
            0
            ------WebKitFormBoundaryU2xN082HVaIRptvd
            Content-Disposition: form-data; name="data"; filename="tw_accounts.csv"
            Content-Type: application/octet-stream
            file_content
            ------WebKitFormBoundaryU2xN082HVaIRptvd
            Content-Disposition: form-data; name="delimiter"
            ,
            ------WebKitFormBoundaryU2xN082HVaIRptvd
            Content-Disposition: form-data; name="enclosure"
            "
            ------WebKitFormBoundaryU2xN082HVaIRptvd

+ Response 200 (application/json)

            {
                "status": "ok",
                "warnings": []
            }


## Load data asynchronously [/v2/storage/tables/{table_id}/import-async]

### Import data [POST]
The method of asynchronous importing should be used for larger imports (everything with 100 lines and more).
The import request is created and added to a queue; the job resource url for status polling is returned.
Asynchronous imports requested on the same table will be serialized.

The actual data must be provided in one of the following attributes:

- **dataFileId**,
- **snapshotId**,
- **dataWorkspaceId** and **dataTableName**

An imported file can be sliced into multiple chunks; the conditions described in [File Uploads](#reference/files) must be satisfied.
The CSV file can be raw or gzipped. Gzipped files must have the extension `.gz`. A typical asynchronous import negotiation consists of these steps:

1. Upload a CSV file using [File Upload](#reference/files).
2. Submit an [asynchronous import request](#reference/tables/load-data-asynchronously/imports-data) with `dataFileId` set to the File Id returned in the previous step.
3. Poll job resource returned in the previous step until the `status` is `success` or `error`.

Further information can be found in the [Developers Documentation](https://developers.keboola.com/integrate/storage/api/import-export/).

+ Parameters
    + table_id (required) - Table Id

+ Attributes
    + dataFileId (optional) - Id of the file stored in [File Uploads](#reference/files); all gzipped and sliced files are supported.
    + snapshotId (optional) - Id of a table snapshot - a table will be created from the snapshot.
    + dataWorkspaceId (optional) - Load from the table [workspace](#reference/workspaces). Use with the **dataTableName** attribute.
    + dataTableName (optional) - Load from the table in the [workspace](#reference/workspaces).
    + incremental (optional, number) - If incremental is set to 0, the target table is truncated before each import.
        Default: 0
    + delimiter (optional) - Field delimiter used in the CSV file. The default value is ','.  Use '\t' or type the tab char for tabulator.
    + enclosure (optional) - Field enclosure used in the CSV file. The default value is '"'. (Note: you can specify either `enclosure` or `escapedBy` parameter, not both.)
    + escapedBy (optional) - Escape character used in the CSV file. The default value is an empty value - no escape character is used. (Note: you can specify either `enclosure` or `escapedBy` parameter, not both.)
    + columns[] (optional) - List of columns present in the CSV file; the first line of the file will not be treated as a header!
    + withoutHeaders (optional) - The CSV file doesn't contain headers, columns are matched by their order. If this option is used, columns option is ignored.

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            dataFileId=12345&incremental=0&delimiter=%2C&enclosure=%22

+ Response 202 (application/json)

            {
                "id": 22070846,
                "status": "waiting",
                "url": "https://connection.keboola.com/v2/storage/jobs/22070846",
                "tableId": "in.c-main.test",
                "operationName": "tableImport",
                "operationParams": {
                    "params": {
                        "incremental": false,
                        "partial": false,
                        "transaction": null,
                        "source": [],
                        "withoutHeaders": false,
                        "columns": [],
                        "delimiter": ",",
                        "enclosure": "\""
                    },
                    "source": {
                        "fileId": "12345",
                        "type": "file"
                    },
                    "queue": "main_fast"
                },
                "createdTime": "2017-02-13T12:51:48+0100",
                "startTime": null,
                "endTime": null,
                "runId": null,
                "results": null,
                "creatorToken": {
                    "id": "27978",
                    "description": "ondrej.popelka@keboola.com"
                },
                "metrics": {
                    "inCompressed": false,
                    "inBytes": 0,
                    "inBytesUncompressed": 0,
                    "outCompressed": false,
                    "outBytes": 0,
                    "outBytesUncompressed": 0
                }
            }


## Data Preview [/v2/storage/tables/{table_id}/data-preview/]
### Data preview [GET]

Returns up to 1000 rows from table in CSV (RFC) format. Rows can be filtered by various filters described below.
For full table download please read more in [Asynchronous Unload documentation](#reference/tables/unload-data-asynchronously).
For the description of filters, see [Asynchronous Unload documentation](#reference/tables/unload-data-asynchronously).

#### HTTP Compression

To enable compression of API response traffic, please include the following HTTP header with the API request: `Accept-encoding: gzip`.


+ Parameters
    + table_id (required) - Table Id

+ Attributes
    + limit (optional, number) - Limit the number of returned rows. Maximum allowed value is `1000`
        + Default: 100
    + changedSince (optional) - Filtering by import date - timestamp of import is stored within each row. Both until and since values can be a unix timestamp or any date accepted by [strtotime](http://www.php.net/manual/en/function.strtotime.php).
    + changedUntil (optional) - Filtering by import date - timestamp of import is stored within each row. Both until and since values can be a unix timestamp or any date accepted by [strtotime](http://www.php.net/manual/en/function.strtotime.php).
        Examples: `-2 days`, `1360138863`, `2013-02-12T15:19:21+00:00`
    + columns (optional) - Comma separated list of columns to export; by default all columns are exported.
    + whereColumn (optional) - **Deprecated** (use whereFilters instead). Column for exporting only matching rows; see more in the rows filtering section.
    + whereValues[] (optional) - **Deprecated** (use whereFilters instead). Values for exporting only matching rows; see more in the rows filtering section.
    + whereOperator (optional, enum[string]) - **Deprecated** (use whereFilters instead). Operator for value comparison.
        + Members
            + eq - Equals - can be used with multiple values.
            + ne - Not equals - can be used with multiple values.
        + Default: eq
    + format (optional, enum[string]) - output format of preview
        + Members
            + rfc - will returns CSV formated output
            + json - will return JSON formated ouput
        + Default: rfc
    + whereFilters[] (optional)
        + column (required) - column which should be matched
        + operator (required, enum[string]) - operator for value comparision
            + Members
                + eq - Equals - can be used with multiple values
                + ne - Not equals  - case be used with multiple values
                + gt - Greater than - Snowflake only
                + ge - Greater than or equals - Snowflake only
                + lt - Less than - Snowflake only
                + le - Less than or equals  - Snowflake only
            + Default: eq
        + values[] (required, array) - array of variables to compare
        + dataType (optional, enum[string]) - Snowflake only - for comparing ([gt|lt|le|ge]) numeric values you have to specify data type
            + Members
                + INTEGER - for numbers without a decimal point
                + DOUBLE - for number with a decimal point
    + orderBy[] (optional) - Snowflake only
        + column (required) - name of column used for sorting
        + order (optional, enum[string])
            + Members
                + ASC - ascending sort
                + DESC - descending sort
            + Default ASC
        + dataType (optional, enum[string]) - required when sorting by column contains numeric value
            + Members
                + INTEGER - for numbers without a decimal point
                + DOUBLE - for number with a decimal point
    + fulltextSearch (optional, string) - Snowflake only. Makes fulltext search over all data in table. It cannot be combined with `whereFilters`.

+ Request
    + Headers

            X-StorageApi-Token: your_token
            Accept-encoding: gzip

+ Response 200 (text/csv)
    + Headers

            Content-Encoding: gzip

    + Body

            "id","name"
            "26","czech"
            "1","english"
            "11","finnish"
            "24","french"


+ Request

    Request with &format=json.

    + Headers

            X-StorageApi-Token: your_token
            Accept-encoding: gzip

+ Response 200 (application/json)

        {
            columns: [
                "id",
                "name"
            ],
            rows: [
               [
                {
                    "columnName" : "id",
                    "value" : "26",
                    "isTruncated": false
                },
                {
                    "columnName" : "name",
                    "value" : "czech",
                    "isTruncated": false
                }
               ],
               [
                {
                    "columnName" : "id",
                    "value" : "1",
                    "isTruncated": false
                },
                {
                    "columnName" : "name",
                    "value" : "english",
                    "isTruncated": false
                }
               ],
            ]
        }

## Unload Data Asynchronously [/v2/storage/tables/{table_id}/export-async]

### Asynchronous Export [POST]
Exports data into File Storage. The Id of the created file is returned.
This task is asynchronous; Id of the created file is stored in the `results` of the created job when the job is finished.

#### Rows filtering
Exported rows can be filtered by a single filter. Examples of filtering by `userId` column:

- `whereFilters[0][column]=UserID&whereFilters[0][values][0]=123` - Single value filter is used on one column.
Equals to `UsedId = 123`.
- `whereFilters[0][column]=UserID&whereFilters[0][values][0]=123&whereFilters[0][values][1]=234` - Multiple value
filter is used on one column. Equals to `UserId IN (123,234)`.
- `whereFilters[0][column]=UserID&whereFilters[0][values][0]=123&whereFilter[0][operator]=ne` - Uses a non equals operator.
Equals to `UserId != 123`.
- `whereFilters[0][column]=Price&whereFilters[0][values][0]=40.3&whereFilters[operator]=gt&dataType=DOUBLE` - Uses greater than operator and cast value as double
Equals to `try_to_double(Price) > 40.3`.

 - For multiple filters use `whereFilters[0]...&whereFilters[1]...&whereFilters[2]...`. All filters are joined by AND expression.

#### Rows sorting
Exported rows can be sorted by multiple columns. Examples of sorting:

- `orderBy[0][column]=UserId`
Sorting ascending by column UserId.
Equals to `ORDER BY UserId ASC`.

- `orderBy[0][column]=UserId&orderBy[0][order]=DESC`
Sorting descending by column UserId.
Equals to `ORDER BY UserId DESC`.

- `orderBy[0][column]=Price&orderBy[0][order]=DESC&orderBy[0][dataType]=DOUBLE`
Sorting descending by column Price with casting column Price to DOUBLE
Equals to `ORDER BY try_to_double(Price) DESC`.

 - For multiple sort condititions use `orderBy[0]...&orderBy[1]...&orderBy[2]`.

The comparison operator essentially behaves like the [SQL IN](http://www.w3schools.com/sql/sql_in.asp) (and NOT IN) operator. That is, the
`eq` value matches if any `whereValues` match, and the `new` value matches if none `whereValues` match.

#### Caching
Asynchronous exports support internal caching. When the export file for a certain table
export parameters was created and there were no changes in the table data since, the
previous cached file will be returned.

#### Job results

The response contains a link to job results. Once the job is finished, the job result
will show information about the created file and caching:

```
    {
        "file": {
            "id": 234
        },
        "cacheHit": false
    }
```

+ Parameters
    + table_id (required) - Table Id

+ Attributes
    + limit (optional, number) - Limit the number of returned rows.
    + days (optional, number) - **DEPRECATED will be removed in the future.** It returns rows created or updated in the last X days.
    + format (optional, enum[string]) - File format
        + Members
            + rfc - According to [RFC](http://www.ietf.org/rfc/rfc4180.txt).
            + escaped - Delimited by a comma, enclosed by a double quote, special characters (e.g. new line, tab) escaped by a backslash. Each row in the CSV file is equal to one row in Storage.
            + raw - Delimited by tab, without an enclosure, special characters (e.g. new line, tab)  escaped by a backslash. Each row in the CSV file is equal to one row in Storage.
        + Default: rfc
    + changedSince (optional) - Filtering by import date - timestamp of import is stored within each row. Both until and since values can be a unix timestamp or any date accepted by [strtotime](http://www.php.net/manual/en/function.strtotime.php).
    + changedUntil (optional) - Filtering by import date - timestamp of import is stored within each row. Both until and since values can be a unix timestamp or any date accepted by [strtotime](http://www.php.net/manual/en/function.strtotime.php).
        Examples: `-2 days`, `1360138863`, `2013-02-12T15:19:21+00:00`
    + columns (optional) - Comma separated list of columns to export; by default all columns are exported.
    + whereColumn (optional) - **Deprecated** (use whereFilters instead). Column for exporting only matching rows; see more in the rows filtering section.
    + whereValues[] (optional) - **Deprecated** (use whereFilters instead). Values for exporting only matching rows; see more in the rows filtering section.
    + whereOperator (optional, enum[string]) - **Deprecated** (use whereFilters instead). Operator for value comparison.
        + Members
            + eq - Equals - can be used with multiple values.
            + ne - Not equals - can be used with multiple values.
        + Default: eq
    + whereFilters[] (optional)
        + column (required) - column which should be matched
        + operator (required, enum[string]) - operator for value comparision
            + Members
                + eq - Equals - can be used with multiple values
                + ne - Not equals  - case be used with multiple values
                + gt - Greater than - Snowflake only
                + ge - Greater than or equals - Snowflake only
                + lt - Less than - Snowflake only
                + le - Less than or equals  - Snowflake only
            + Default: eq
        + values[] (required, array) - array of variables to compare
        + dataType (optional, enum[string]) - Snowflake only - for comparing ([gt|lt|le|ge]) numeric values you have to specify data type
            + Members
                + INTEGER - for numbers without a decimal point
                + DOUBLE - for number with a decimal point
    + orderBy[] (optional) - Snowflake only
        + column (required) - name of column used for sorting
        + order (optional, enum[string])
            + Members
                + ASC - ascending sort
                + DESC - descending sort
            + Default ASC
        + dataType (optional, enum[string]) - required when sorting by column contains numeric value
            + Members
                + INTEGER - for numbers without a decimal point
                + DOUBLE - for number with a decimal point
    + gzip (optional, boolean) - The response will be gzipped if set to true.

+ Request
    + Headers

            X-StorageApi-Token: your_token
            Accept-encoding: gzip

+ Response 202 (application/json)

    + Body

            {
                "id": 22070936,
                "status": "waiting",
                "url": "https://connection.keboola.com/v2/storage/jobs/22070936",
                "tableId": "in.c-main.test",
                "operationName": "tableExport",
                "operationParams": {
                    "export": {
                        "tableName": null,
                        "columns": [],
                        "limit": null,
                        "changedSince": null,
                        "changedUntil": null,
                        "gzipOutput": false,
                        "format": "rfc",
                        "whereFilters": []
                    },
                    "queue": "main_fast"
                },
                "createdTime": "2017-02-13T12:56:57+0100",
                "startTime": null,
                "endTime": null,
                "runId": null,
                "results": null,
                "creatorToken": {
                    "id": "27978",
                    "description": "ondrej.popelka@keboola.com"
                },
                "metrics": {
                    "inCompressed": false,
                    "inBytes": 0,
                    "inBytesUncompressed": 0,
                    "outCompressed": false,
                    "outBytes": 0,
                    "outBytesUncompressed": 0
                }
            }


## Manage Tables [/v2/storage/tables/{table_id}]

### Table detail [GET]
Obtains information about a table.

+ Parameters
    + table_id (required) - Table Id

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)

            {
                "uri": "https://connection.keboola.com/v2/storage/tables/in.c-application-testing.cashier-data-alias",
                "id": "in.c-application-testing.cashier-data-alias",
                "name": "cashier-data-alias",
                "displayName": "cashier-data-alias-displayName",
                "transactional": false,
                "primaryKey": [],
                "indexedColumns": [],
                "created": "2019-08-14T16:54:06+0200",
                "lastImportDate": "2015-11-03T10:58:31+0100",
                "lastChangeDate": "2015-11-03T10:58:32+0100",
                "rowsCount": 199,
                "dataSizeBytes": 25165824,
                "isAlias": true,
                "isAliasable": true,
                "sourceTable": {
                    "id": "in.c-application-testing.cashier-data",
                    "uri": "https://connection.keboola.com/v2/storage/tables/in.c-application-testing.cashier-data",
                    "project": {
                        "id": 123,
                        "name": "Some source project"
                    },
                    "columnMetadata": {
                        "number_of_items": [
                            {
                                "id": "207947778",
                                "key": "KBC.datatype.basetype",
                                "value": "INTEGER",
                                "provider": "user",
                                "timestamp": "2019-08-14T16:55:34+0200"
                            }
                        ]
                    }
                },
                "aliasColumnsAutoSync": true,
                "columns": [
                    "time_spent_in_shop",
                    "number_of_items",
                    "customer_shoe_size",
                    "customer_age",
                    "age_segment",
                    "no_segment",
                    "customer_segment",
                    "visit_id"
                ],
                "columnMetadata": [],
                "attributes": [],
                "metadata": [],
                "bucket": {
                    "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-application-testing",
                    "id": "in.c-application-testing",
                    "name": "c-application-testing",
                    "displayName": "application-testing",
                    "stage": "in",
                    "description": "",
                    "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-application-testing/tables",
                    "created": "2015-11-03T10:54:55+0100",
                    "lastChangeDate": "2019-08-14T16:54:06+0200",
                    "isReadOnly": false,
                    "dataSizeBytes": 129427968,
                    "rowsCount": 237902,
                    "isMaintenance": false,
                    "backend": "snowflake",
                    "sharing": null,
                    "directAccessEnabled": false,
                    "directAccessSchemaName": null,
                    "metadata": []
                }
            }

### Table update [PUT /v2/storage/tables/{table_id}]
Update an existing table

+ Parameters
    + table_id (required) - Table Id

+ Attributes
    + displayName (required, string) - Table displayName, this name is displayed in UI and can be changed anytime; only alphanumeric characters,underscores and dashes are allowed.

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            displayName=updated-table-display-name

+ Response 200 (application/json)

            {
                "uri": "https://connection.keboola.com/v2/storage/tables/in.c-application-testing.cashier-data-alias",
                "id": "in.c-application-testing.cashier-data-alias",
                "name": "cashier-data-alias",
                "displayName": "my-display-name",
                "transactional": false,
                "primaryKey": [],
                "indexedColumns": [],
                "created": "2019-08-14T16:54:06+0200",
                "lastImportDate": "2015-11-03T10:58:31+0100",
                "lastChangeDate": "2015-11-03T10:58:32+0100",
                "rowsCount": 199,
                "dataSizeBytes": 25165824,
                "isAlias": true,
                "isAliasable": true,
                "sourceTable": {
                    "id": "in.c-application-testing.cashier-data",
                    "uri": "https://connection.keboola.com/v2/storage/tables/in.c-application-testing.cashier-data",
                    "project": {
                        "id": 123,
                        "name": "Some source project"
                    },
                    "columnMetadata": {
                        "number_of_items": [
                            {
                                "id": "207947778",
                                "key": "KBC.datatype.basetype",
                                "value": "INTEGER",
                                "provider": "user",
                                "timestamp": "2019-08-14T16:55:34+0200"
                            }
                        ]
                    }
                },
                "aliasColumnsAutoSync": true,
                "columns": [
                    "time_spent_in_shop",
                    "number_of_items",
                    "customer_shoe_size",
                    "customer_age",
                    "age_segment",
                    "no_segment",
                    "customer_segment",
                    "visit_id"
                ],
                "columnMetadata": [],
                "attributes": [],
                "metadata": [],
                "bucket": {
                    "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-application-testing",
                    "id": "in.c-application-testing",
                    "name": "c-application-testing",
                    "stage": "in",
                    "description": "",
                    "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-application-testing/tables",
                    "created": "2015-11-03T10:54:55+0100",
                    "lastChangeDate": "2019-08-14T16:54:06+0200",
                    "isReadOnly": false,
                    "dataSizeBytes": 129427968,
                    "rowsCount": 237902,
                    "isMaintenance": false,
                    "backend": "snowflake",
                    "sharing": null,
                    "directAccessEnabled": false,
                    "directAccessSchemaName": null,
                    "metadata": []
                }
            }


### Drop table [DELETE /v2/storage/tables/{table_id}/?force={force}]
Deletes a table from Storage. In default mode, only table having any aliases can be deleted.
Use the optional `force` parameter to delete its aliases too.

+ Parameters
    + table_id (required) - Table Id
    + force (optional, boolean) - Drops the table and its aliases.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204

## Table Optimize [/v2/storage/tables/{table_id}/optimize]

### Optimize table [POST]
This is a utility command implemented only for projects with the Redshift backend.
Redshift tables with a lot of small-increment loads bloat in size. An optimize command is automatically scheduled to fix
this issue. This API call can be used to trigger immediate optimization of a table.

+ Parameters
    + table_id (required) - Table Id

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)

            {
                "id": 245,
                "status": "waiting",
                "url": "/v2/storage/jobs/245",
                "tableId": "in.c-API-tests.MyLanguages_test",
                "operationName": "tableOptimize",
                "operationParams": {
                    "queue": "main_fast"
                },
                "createdTime": "2016-10-17T10:31:52+0200",
                "startTime": null,
                "endTime": null,
                "runId": null,
                "results": null,
                "creatorToken": {
                    "id": "31",
                    "description": "dev@keboola.com"
                },
                "metrics": {
                    "inCompressed": false,
                    "inBytes": 0,
                    "inBytesUncompressed": 0,
                    "outCompressed": false,
                    "outBytes": 0,
                    "outBytesUncompressed": 0
                }
            }


## List Tables [/v2/storage/tables?include={include}]

### List All Tables [GET]
Lists all tables accessible by the token. By default, all tables are returned with their
attributes and information about the containing bucket.

+ Parameters
    + include (optional, enum[string]) - Comma separated list of resources to include for each table.
        + Members
            + attributes
            + buckets
            + columns
            + metadata
            + columnMetadata
        + Default: attributes,metadata

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-application-testing.cashier-data",
                    "id": "in.c-application-testing.cashier-data",
                    "name": "cashier-data",
                    "displayName": "cashier-data-displayName",
                    "transactional": false,
                    "primaryKey": [],
                    "indexedColumns": [],
                    "created": "2016-06-23T20:41:07+0200",
                    "lastImportDate": "2016-07-07T11:25:32+0200",
                    "lastChangeDate": "2016-07-07T11:25:34+0200",
                    "rowsCount": 18,
                    "dataSizeBytes": 12288,
                    "isAlias": false,
                    "isAliasable": true,
                    "attributes": [],
                    "columns": [
                        "time_spent_in_shop",
                        "number_of_items",
                        "customer_shoe_size",
                        "customer_age",
                        "age_segment",
                        "no_segment",
                        "customer_segment",
                        "visit_id"
                    ],
                    "bucket": {
                        "uri": "https:\/\/connection.keboola.com\/v2\/storage\/buckets\/in.c-application-testing",
                        "id": "in.c-application-testing",
                        "name": "c-application-testing",
                        "displayName": "application-testing",
                        "stage": "in",
                        "description": "Main project storage",
                        "tables": "https:\/\/connection.keboola.com\/v2\/storage\/buckets\/in.c-application-testing\/tables",
                        "created": "2015-02-05T10:57:08+0100",
                        "lastChangeDate": "2017-02-12T10:36:15+0100",
                        "isReadOnly": false,
                        "dataSizeBytes": 685750272,
                        "rowsCount": 2438881,
                        "isMaintenance": false,
                        "backend": "snowflake",
                        "sharing": null,
                        "directAccessEnabled": false,
                        "directAccessSchemaName": null
                    },
                    "columnMetadata": {
                        "number_of_items": [
                            {
                                "id": "207947778",
                                "key": "KBC.datatype.basetype",
                                "value": "INTEGER",
                                "provider": "user",
                                "timestamp": "2019-08-14T16:55:34+0200"
                            }
                        ]
                    }
                },
                {
                    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-application-testing.cashier-data-alias",
                    "id": "in.c-application-testing.cashier-data-alias",
                    "name": "cashier-data-alias",
                    "displayName": "cashier-data-alias-displayName"
                    "transactional": false,
                    "primaryKey": [],
                    "indexedColumns": [],
                    "created": "2016-06-23T20:41:38+0200",
                    "lastImportDate": "2016-07-07T11:26:03+0200",
                    "lastChangeDate": "2016-07-07T11:26:05+0200",
                    "rowsCount": 48,
                    "dataSizeBytes": 12288,
                    "isAlias": true,
                    "isAliasable": true,
                    "sourceTable": {
                        "id": "in.c-application-testing.cashier-data",
                        "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-application-testing.cashier-data",
                        "project": {
                            "id": 578,
                            "name": "Some source project"
                        },
                        "columnMetadata": {
                            "number_of_items": [
                                {
                                    "id": "207947778",
                                    "key": "KBC.datatype.basetype",
                                    "value": "INTEGER",
                                    "provider": "user",
                                    "timestamp": "2019-08-14T16:55:34+0200"
                                }
                            ]
                        }
                    },
                    "aliasColumnsAutoSync": true,
                    "attributes": [],
                    "columns": [
                        "time_spent_in_shop",
                        "number_of_items",
                        "customer_shoe_size",
                        "customer_age",
                        "age_segment",
                        "no_segment",
                        "customer_segment",
                        "visit_id"
                    ],
                    "bucket": {
                        "uri": "https:\/\/connection.keboola.com\/v2\/storage\/buckets\/in.c-application-testing",
                        "id": "in.c-application-testing",
                        "name": "c-application-testing",
                        "displayName": "application-testing",
                        "stage": "in",
                        "description": "Main project storage",
                        "tables": "https:\/\/connection.keboola.com\/v2\/storage\/buckets\/in.c-application-testing\/tables",
                        "created": "2015-02-05T10:57:08+0100",
                        "lastChangeDate": "2017-02-12T10:36:15+0100",
                        "isReadOnly": false,
                        "dataSizeBytes": 685750272,
                        "rowsCount": 2438881,
                        "isMaintenance": false,
                        "backend": "snowflake",
                        "sharing": null,
                        "directAccessEnabled": false,
                        "directAccessSchemaName": null
                    },
                    "columnMetadata": []
                }
            ]


## Create Table Column [/v2/storage/buckets/{table_id}/columns/]

### Add Column to Table [POST]
Adds a new column to an existing table. This request is [asynchronous](#introduction/synchronous-and-asynchronous-calls).

+ Parameters
    + table_id (required) - Table Id

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            name=new-column

+ Response 202 (application/json)
    + Body

            {
               "id":1189,
               "status":"waiting",
               "url":"https:\/\/connection.keboola.com\/v2\/storage\/jobs\/1189",
               "tableId":"in.c-main.another",
               "operationName":"tableColumnAdd",
               "operationParams":{
                  "name":"new-column"
               },
               "createdTime":"2013-07-08T10:01:03+0200",
               "startTime":null,
               "endTime":null,
               "runId":null,
               "results":null,
               "creatorToken":{
                  "id":"221",
                  "name":"Master Token"
               }
            }

## Manage Table Columns [/v2/storage/tables/{table_id}/columns/{column_name}]

### Delete Column from Table [DELETE /v2/storage/tables/{table_id}/columns/{column_name}/?force={force}]
Deletes an existing column from an existing table. This request is [asynchronous](#introduction/synchronous-and-asynchronous-calls).
Use the optional `force` parameter to delete the column from table aliases too.

+ Parameters
    + table_id (required) - Table Id
    + column_name (required) - Column Name
    + force (optional, boolean) - Delete the column from table and table aliases. All aliases must have `aliasColumnsAutosync` enabled.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 202 (application/json)
    + Body

            {
               "id":1189,
               "status":"waiting",
               "url":"https:\/\/connection.keboola.com\/v2\/storage\/jobs\/1189",
               "tableId":"in.c-main.another",
               "operationName":"tableColumnDelete",
               "operationParams":{
                  "name":"new-column",
                  "force": false
               },
               "createdTime":"2013-07-08T10:01:03+0200",
               "startTime":null,
               "endTime":null,
               "runId":null,
               "results":null,
               "creatorToken":{
                  "id":"221",
                  "name":"Master Token"
               }
            }

## Primary Keys [/v2/storage/tables/{table_id}/primary-key/]
### Create Primary Key [POST]
If a primary key is set, updates can be done on the table. A primary key can be composed of multiple columns.
This request is [asynchronous](#introduction/synchronous-and-asynchronous-calls).

+ Parameters
    + table_id (required) - Table Id

+ Attributes
    + columns[] (required) - Array of columns used as the primary key

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            columns[]=id

+ Response 202 (application/json)
    + Body

            {
               "id":1189,
               "status":"waiting",
               "url":"https:\/\/connection.keboola.com\/v2\/storage\/jobs\/1189",
               "tableId":"in.c-main.another",
               "operationName":"tablePrimaryKeyAdd",
               "operationParams":{
                  "columns":["id"]
               },
               "createdTime":"2013-07-08T10:01:03+0200",
               "startTime":null,
               "endTime":null,
               "runId":null,
               "results":null,
               "creatorToken":{
                  "id":"221",
                  "name":"Master Token"
               }
            }

### Remove Primary Key [DELETE]
Removes the primary key from a table. This request is [asynchronous](#introduction/synchronous-and-asynchronous-calls).

+ Parameters
    + table_id (required) - Table Id

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 202 (application/json)
    + Body

            {
               "id":1189,
               "status":"waiting",
               "url":"https:\/\/connection.keboola.com\/v2\/storage\/jobs\/1189",
               "tableId":"in.c-main.another",
               "operationName":"tablePrimaryKeyDelete",
               "operationParams":{
               },
               "createdTime":"2013-07-08T10:01:03+0200",
               "startTime":null,
               "endTime":null,
               "runId":null,
               "results":null,
               "creatorToken":{
                  "id":"221",
                  "name":"Master Token"
               }
            }


## Manage Table Rows [/v2/storage/tables/{table_id}/rows]

### Delete Table Rows [DELETE]
Deletes all rows matching the specified filter. The number of deleted rows is returned.
This request is [asynchronous](#introduction/synchronous-and-asynchronous-calls).

+ Parameters
    + table_id (required) - Table Id

+ Attributes
    + whereColumn (optional) - Column for exporting only matching rows, see more in the [rows filtering section](#reference/tables/unload-data-asynchronously/asynchronous-export).
    + whereValues[] (optional) - Values for exporting only matching rows, see more in the [rows filtering section](#reference/tables/unload-data-asynchronously/asynchronous-export).
    + whereOperator (optional, enum[string]) - Operator for value comparison.
        + Members
            + eq - Equals - can be used with multiple values.
            + ne - Not equals - can be used with multiple values.
        + Default: eq
    + changedSince - (optional) filtering by import date - timestamp of import is stored within each row. Both until and since values can be a unix timestamp or any date accepted by [strtotime](http://www.php.net/manual/en/function.strtotime.php). Examples: `-2 days`, `1360138863`, `2013-02-12T15:19:21+00:00`
    + changedUntil - (optional) filtering by import date - timestamp of import is stored within each row. Both until and since values can be a unix timestamp or any date accepted by [strtotime](http://www.php.net/manual/en/function.strtotime.php). Examples: `-2 days`, `1360138863`, `2013-02-12T15:19:21+00:00`

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 202 (application/json)
    + Body

            {
               "id":1190,
               "status":"waiting",
               "url":"https:\/\/connection.keboola.com\/v2\/storage\/jobs\/1190",
               "tableId":"in.c-main.another",
               "operationName":"tableRowsDelete",
               "operationParams":{
                  "whereColumn":"id",
                  "whereValues": [12344],
                  "whereOperator": "eq"
               },
               "createdTime":"2013-07-08T10:01:03+0200",
               "startTime":null,
               "endTime":null,
               "runId":null,
               "results":null,
               "creatorToken":{
                  "id":"221",
                  "name":"Master Token"
               }
            }



# Group Table Aliases
[Aliases](https://help.keboola.com/storage/tables/) behave like database Views. Alias tables are read-only.
Aliases cannot be chained and can be applied only between buckets with the same backend.

Rows present in an alias table can be filtered by a simple condition similar to
[table export filtering](#reference/tables/unload-data-asynchronously/asynchronous-export).
The filter parameter `aliasFilter` must be set during an alias table creation or later to enable filtering:

* **column** - Filtered by column name
* **operator** - Filter operator: `eq`, `ne`
* **values[]** - One or more filter values

#### Alias table columns
By default, the alias columns are automatically synced with the source table. You can disable this behaviour
by setting up `aliasColumnsAutosync` to `false` and setting up list of columns by `aliasColumns` parameter.
Later you can modify the alias columns by the table columns methods.
When turning `aliasColumnsAutoSync` back on, the columns will be immediately synced with the source table.

## Create Table Alias [/v2/storage/buckets/{bucket_id}/table-aliases]

### Create new alias table [POST]

+ Parameters
    + bucket_id (required) - Id of a bucket in which the alias table will be created.

+ Attributes
    + name (required) - Name of the new table alias
    + sourceTable (required) - Id of the source table
    + aliasFilter[column] (optional) - Name of the column for filtering
    + aliasFilter[operator] (optional, enum[string]) - Comparison operator
        + Members
            + eq - Equal to
            + ne - Not equal to
        + Default: eq
    + aliasFilter[values][] (optional) - Values for the filter
    + aliasColumnsAutosync (optional, boolean) - Disables column synchronization with the source table.
        Default: false
    + aliasColumns[] (optional) - List of alias columns; this disables column synchronization with the source table.

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            sourceTable=in.c-main.data&name=test-alias2&aliasFilter%5Bcolumn%5D=campaign_id&aliasFilter%5Bvalues%5D%5B%5D=68abf5473f&aliasFilter%5Bvalues%5D%5B%5D=03e9b81530&aliasFilter%5Boperator%5D=eq&aliasColumns%5B%5D=campaign_id&aliasColumns%5B%5D=email

+ Response 201 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/tables/in.c-Test2.test-alias2",
                "id": "in.c-Test2.test-alias2",
                "name": "test-alias2",
                "displayName": "test-alias2-displayName",
                "transactional": false,
                "primaryKey": [],
                "indexedColumns": [],
                "created": "2017-02-13T13:53:31+0100",
                "lastImportDate": "2016-07-07T11:25:32+0200",
                "lastChangeDate": "2016-07-07T11:25:34+0200",
                "rowsCount": null,
                "dataSizeBytes": null,
                "isAlias": true,
                "sourceTable": {
                    "id": "in.c-main.data",
                    "uri": "https://connection.keboola.com/v2/storage/tables/in.c-main.data",
                    "project": {
                        "id": 578,
                        "name": "Odinuv Sandbox"
                    }
                },
                "aliasColumnsAutoSync": false,
                "aliasFilter": {
                    "column": "campaign_id",
                    "operator": "eq",
                    "values": [
                        "68abf5473f",
                        "03e9b81530"
                    ]
                },
                "columns": [
                    "campaign_id",
                    "email"
                ],
                "bucket": {
                    "uri": "https://connection.keboola.com/v2/storage/buckets/in.c-Test2",
                    "id": "in.c-Test2",
                    "name": "c-Test2",
                    "displayName": "Test2",
                    "stage": "in",
                    "description": "",
                    "tables": "https://connection.keboola.com/v2/storage/buckets/in.c-Test2/tables",
                    "created": "2017-02-13T11:41:55+0100",
                    "lastChangeDate": "2017-02-13T13:50:55+0100",
                    "isReadOnly": false,
                    "dataSizeBytes": 0,
                    "rowsCount": 0,
                    "isMaintenance": false,
                    "backend": "snowflake",
                    "sharing": null,
                    "directAccessEnabled": false,
                    "directAccessSchemaName": null
                }
            }


## Manage Alias Filters [/v2/storage/tables/{table_id}/alias-filter]

### Update Alias Filter [POST]
Using this API call, you can update an existing filter. You can also set a new filter, but the
alias must be created with the `aliasFilter` parameter.

+ Parameters
    + table_id (required) - Id of the alias table

+ Attributes
    + column (optional) - Column name
    + values[] (optional) - Column filter values
    + operator (optional, enum[string]) - Comparison operator
        + Members
            + eq - Equal to
            + ne - Not equal to
        + Default: eq

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            column=campaign_id&values%5B%5D=68abf5473f

+ Response 200 (application/json)
    + Body

            {
                "uri": "https://connection.keboola.com/v2/storage/tables/in.c-Test2.test-alias2",
                "id": "in.c-Test2.test-alias2",
                "name": "test-alias2",
                "displayName": "test-alias2-displayName",
                "transactional": false,
                "primaryKey": [],
                "indexedColumns": [],
                "created": "2017-02-13T13:53:31+0100",
                "lastImportDate": "2016-07-07T11:25:32+0200",
                "lastChangeDate": "2016-07-07T11:25:34+0200",
                "rowsCount": null,
                "dataSizeBytes": null,
                "isAlias": true,
                "sourceTable": {
                    "id": "in.c-main.data",
                    "uri": "https://connection.keboola.com/v2/storage/tables/in.c-main.data",
                    "project": {
                        "id": 578,
                        "name": "Odinuv Sandbox"
                    }
                },
                "aliasColumnsAutoSync": false,
                "aliasFilter": {
                    "column": "campaign_id",
                    "operator": "eq",
                    "values": [
                        "68abf5473f"
                    ]
                }
            }

### Remove Alias Filter [DELETE]
Deletes a filter from an alias. The alias table will contain all rows from the source table.

+ Parameters
    + table_id (required) - Id of the alias table

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204


## Alias Column Synchronization [/v2/storage/tables/{table_id}/alias-columns-auto-sync]

### Enable Column Synchronization [POST]
Enables automatic column synchronization between the alias and source table. All columns from the source table
will be immediately synchronized into the alias table.

+ Parameters
    + table_id (required) - Id of the alias table

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204


### Disable Column Synchronization [DELETE]
Disables automatic column synchronization between the alias and source table. Columns from the source table
will not be synchronized with the alias table any more. When you add new columns into the source table, they
will not propagate to the alias.

+ Parameters
    + table_id (required) - Id of the alias table

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204


# Group Table Snapshotting
Table data and metadata (attributes, column settings) can be persisted by creating a snapshot.
When a snapshot is created you can use it to restore the table back to the snapshotted state.
During the restoration process, the data can be applied to the original table or they can be restored
into a new table.

## Create or List Snapshots [/v2/storage/tables/{table_id}/snapshots]

### Create Table Snapshot [POST]
Creates a snapshot of the current state of the table. This request is [asynchronous](#introduction/synchronous-and-asynchronous-calls).
A table snapshot will contain:
- Table data,
- Table properties (primary key, indexed columns, etc.),
- Table attributes.

Snapshots of an alias table contain only alias settings, actual data are not stored with the snapshot.

+ Parameters
    + table_id (required) - Id of a table

+ Attributes
    + description (optional) - Snapshot description

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            description=My first snapshot

+ Response 202 (application/json)
    + Body

            {
                "id": 22073730,
                "status": "waiting",
                "url": "https://connection.keboola.com/v2/storage/jobs/22073730",
                "tableId": "in.c-main.test",
                "operationName": "tableSnapshotCreate",
                "operationParams": {
                    "description": null,
                    "queue": "main_fast"
                },
                "createdTime": "2017-02-13T14:44:46+0100",
                "startTime": null,
                "endTime": null,
                "runId": null,
                "results": null,
                "creatorToken": {
                    "id": "27978",
                    "description": "ondrej.popelka@keboola.com"
                },
                "metrics": {
                    "inCompressed": false,
                    "inBytes": 0,
                    "inBytesUncompressed": 0,
                    "outCompressed": false,
                    "outBytes": 0,
                    "outBytesUncompressed": 0
                }
            }


### List Table Snapshots [GET]
Retrieves a list of all snapshots of a table.

+ Parameters
    + table_id (required) - Id of a table

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200
    + Headers

            Content-type: application/json

    + Body

            [
                {
                "id": "82629",
                "description": "Bucket backend migration (mysql -> snowflake)",
                "createdTime": "2016-05-26T14:26:56+0200",
                "type": "table",
                "creatorToken": {
                    "id": 0,
                    "description": "Internal  - Bucket backend migration"
                },
                "uri": "https://connection.keboola.com/v2/storage/snapshots/82629",
                "dataFileId": "188803533"
                }
            ]

## Manage Snapshots [/v2/storage/snapshots/{snapshot_id}]

### Snapshot Detail [GET]
Retrieves information about a single table snapshot.

+ Parameters
    + snapshot_id - Id of the snapshot; use the
    [List Snapshots Call](#reference/table-snapshotting/create-or-list-snapshots/list-table-snapshots) to find snapshot Id.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "id": "20",
                "description": "",
                "createdTime": "2013-08-12T12:33:04+0200",
                "type": "table",
                "creatorToken": {
                    "id": 221,
                    "description": "Master Token"
                },
                "dataFileId": "161757",
                "table": {
                    "id": "in.c-dalsi.alias",
                    "primaryKey": [],
                    "indexedColumns": [],
                    "attributes": [
                        {
                            "name": "afd",
                            "value": "sdfa",
                            "protected": false
                        },
                        {
                            "name": "pokus",
                            "value": "neco",
                            "protected": false
                        },
                        {
                            "name": "test",
                            "value": "adsf",
                            "protected": false
                        },
                        {
                            "name": "sadf",
                            "value": "",
                            "protected": false
                        },
                        {
                            "name": "asd",
                            "value": "",
                            "protected": false
                        }
                    ],
                    "columns": [
                        "id",
                        "name"
                    ]
                }
            }


### Delete Table Snapshot [DELETE]
Removes a table snapshot. The current table data is not modified. This request
is [asynchronous](#introduction/synchronous-and-asynchronous-calls).

+ Parameters
    + snapshot_id - Id of the snapshot. Use the
    [List Snapshots Call](#reference/table-snapshotting/create-or-list-snapshots/list-table-snapshots) to find snapshot Id.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 202 (application/json)
    + Body

            {
                "id":1189,
                "status":"waiting",
                "url":"https:\/\/connection.keboola.com\/v2\/storage\/jobs\/1189",
                "tableId":"in.c-main.another",
                "operationName":"tableSnapshotDelete",
                "operationParams":{
                    "snapshotId":"80954"
                },
                "createdTime":"2013-07-08T10:01:03+0200",
                "startTime":null,
                "endTime":null,
                "runId":null,
                "results":null,
                "creatorToken":{
                    "id":"221",
                    "name":"Master Token"
                }
            }


# Group Workspaces
Workspaces provide a playground for your data. You can load data from your storage, explore or modify it
and then, optionally, load it back to storage tables. A workspace is represented by access credentials to a storage
backend with permissions to write to the workspace specific database schema.

## Workspaces Collection [/v2/storage/workspaces]

### Create new workspace [POST]
Creates a new workspace and return its credentials.

+ Attributes
    + backend: snowflake (optional, enum[string]) - Workspace backend. When omitted, the default backend is used.
        + Members
            + redshift
            + snowflake
    the system. Supported only for Snowflake workspaces.

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            backend=snowflake

+ Response 201 (application/json)

   + Attributes (WorkspaceCreated)


### List workspaces [GET]
Returns all workspaces for the project.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)

   + Attributes (array[Workspace])

## Manage Workspace [/v2/storage/workspaces/{workspace_id}]
### Workspace detail [GET]
Retrieves information about a given workspace. Note that the password to the workspace can be retrieved only when the workspace is created.

+ Parameters
    + workspace_id (number)

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)

    + Attributes (Workspace)

### Delete workspace [DELETE /v2/storage/workspaces/{workspace_id}/?async={async}]
Deletes a workspace. This also irreversibly removes the workspace content.

+ Parameters
    + workspace_id (required, number)
    + async (optional, boolean) - Workspace will be deleted [asynchronously](#introduction/synchronous-and-asynchronous-calls). A job will be created and enqueued.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204

## Load Data [/v2/storage/workspaces/{workspace_id}/load]

+ Parameters

    + workspace_id (required, number)

### Load Data [POST]
Loads tables from Storage into a Workspace.

+ Attributes
    + input[] (required, array) - Mappings of source tables with destinations to be loaded into the workspace
        + Items
            + (object)
                + Properties
                    + source (required) - Full table identifier of the source table (e.g.: in.c-bucket.mytable)
                    + destination (required) - Destination table name
                    + rows (optional, number) - Limits the number of returned rows
                    + days (optional, number) - `DEPRECATED will be removed in the future.` Return rows created or updated in the last X days.
                    + seconds (optional, number) - Returns rows created or updated in the last X seconds.
                    + columns[] (optional, array) - Array of column definition; by default all columns are exported.
                        + Items
                            + (object)
                                + Properties
                                    + source (required, string) - Column name
                                    + destination (optional, string) - Destination column name. If not set, source column name will be used.
                                    + type (required, string) - Data type, eg. VARCHAR
                                    + length (optional, string) - Data type size, where applicable, eg. 255 for VARCHAR or 10,2 for NUMBER
                                    + nullable (optional, boolean) - Allow NULL values in destination table
                                        Default: true
                                    + convertEmptyValuesToNull (optional, boolean) - Empty values replaced by NULL
                                        Default: false
                                    + compression (optional, enum[string]) - For Redshift only
                                        + Members
                                            + RAW
                                            + BYTEDICT
                                            + DELTA
                                            + DELTA32K
                                            + LZO
                                            + MOSTLY8
                                            + MOSTLY16
                                            + MOSTLY32
                                            + RUNLENGTH
                                            + TEXT255
                                            + TEXT32K
                                            + ZSTD
                    + whereColumn (optional) - Column for [filtering](#reference/tables/unload-data-asynchronously/asynchronous-export)
                    + whereValues[] (optional) - Values for filtering
                    + whereOperator (optional, enum[string]) - Comparison operator
                        + Members
                            + eq - Equal to
                            + ne - Not equal to
                        + Default: eq
                    + sortKey[] (optional, array) - Redshift only - Column(s) to be used as a sort key
                    + distStyle (optional, enum[string]) - Redshift only - Distribution style (even, all, or key)
                        + Members
                            + even
                            + all
                            + key
                    + distKey (optional) - Redshift only - Column to use for the key distribution style
                    + incremental (optional, boolean) - Rows will be appended to an existing table
                        Default: false
    + preserve (optional, boolean) - Keep existing tables in the workspace, otherwise the workspace will be purged before loading
        Default: false

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            input%5B0%5D%5Bsource%5D=in.c-application-testing.carseats&input%5B0%5D%5Bdestination%5D=table1&input%5B1%5D%5Bsource%5D=in.c-application-testing.cashier-data&input%5B1%5D%5Bdestination%5D=table2

+ Response 201 (application/json)
    + Body

            {
                "id": 75682259,
                "status": "waiting",
                "url": "https://connection.keboola.com/v2/storage/jobs/75682259",
                "tableId": null,
                "operationName": "workspaceLoad",
                "operationParams": {
                    "workspaceId": "504345774",
                    "preserve": false,
                    "input": [
                        {
                            "source": "in.c-application-testing.carseats",
                            "destination": "table1"
                        },
                        {
                            "source": "in.c-application-testing.cashier-data",
                            "destination": "table2"
                        }
                    ],
                    "queue": "main"
                },
                "createdTime": "2019-05-13T21:15:52+0200",
                "startTime": null,
                "endTime": null,
                "runId": null,
                "results": null,
                "creatorToken": {
                    "id": "27978",
                    "description": "ondrej.popelka@keboola.com"
                },
                "metrics": {
                    "inCompressed": false,
                    "inBytes": 0,
                    "inBytesUncompressed": 0,
                    "outCompressed": false,
                    "outBytes": 0,
                    "outBytesUncompressed": 0
                }
            }


## Load Data using CLONE [/v2/storage/workspaces/{workspace_id}/load-clone]

+ Parameters

    + workspace_id (required, number)

### Load Data using CLONE [POST]
Load tables from Storage into a Workspace using zero-copy cloning functionality in Snowflake. This load type does not
support any filtering or processing parameters. Only tables stored in Snowflake are supported.

The cloned table will contain all columns of the source table (all of them as `VARCHAR(1048576)`)
and a `_timestamp` system column.
This column contains a unix timestamp value (`TIMESTAMP_NTZ(9)`) when the row was added to the table or
when any of the row values were changed during an incremental import.

+ Attributes
    + input[] (required, array) - Mappings of source tables with destinations to be loaded into the workspace
        + Items
            + (object)
                + Properties
                    + source (required) - Full table identifier of the source table (e.g.: in.c-bucket.mytable)
                    + destination (required) - Destination table name
    + preserve (optional, boolean) - Keep existing tables in the workspace, otherwise the workspace will be purged before loading
        Default: false

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            input%5B0%5D%5Bsource%5D=in.c-application-testing.cashier-data&input%5B0%5D%5Bdestination%5D=my-table

+ Response 201 (application/json)
    + Body

            {
                "id": 22077337,
                "status": "waiting",
                "url": "https://connection.keboola.com/v2/storage/jobs/22077337",
                "tableId": null,
                "operationName": "workspaceLoad",
                "operationParams": {
                    "workspaceId": "78423",
                    "preserve": false,
                    "input": [
                        {
                            "source": "in.c-application-testing.cashier-data",
                            "destination": "my-table"
                        }
                    ],
                    "queue": "main_fast"
                },
                "createdTime": "2017-02-13T16:41:18+0100",
                "startTime": null,
                "endTime": null,
                "runId": null,
                "results": null,
                "creatorToken": {
                    "id": "27978",
                    "description": "ondrej.popelka@keboola.com"
                },
                "metrics": {
                    "inCompressed": false,
                    "inBytes": 0,
                    "inBytesUncompressed": 0,
                    "outCompressed": false,
                    "outBytes": 0,
                    "outBytesUncompressed": 0
                }
            }

## Password reset [/v2/storage/workspaces/{workspace_id}/password]
### Password reset  [POST]
Generates new password for the given workspace

+ Parameters
    + workspace_id (number)

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 201 (application/json)

    + Body

            {
                "password": "2Fd4e1c67a2d28fced849ee1bb76e7391b93eb12",
            }

## Data Structures

### Workspace

+ id: 234 (number)
+ name: `boring_wozniak` (string) - working schema name
+ component: `wr-db` (string) - name of the [registered component](#reference/miscellaneous/api-index/component-list) that created the workspace
+ configurationId: `aws-1` (string) - id of a [configuration](#reference/component-configurations/component-list) used to create workspace
+ created: `2016-05-17T11:11:20+0200` (string)
+ connection
    + backend: `snowflake` (string)
    + host: `keboola.snowflakecomputing.com` (string)
    + database: `keboola_123` (string)
    + schema:  `boring_wozniak` (string)
    + warehouse: `SAPI_PROD` (string)
    + user: `xzy` (string)
+ creatorToken
    + id: 234 (number)
    + description: `martin@keboola.com` (string)
+ creatorUser
    + id: 234 (number)
    + name: `Martin` (string)

### WorkspaceCreated (Workspace)

+ connection
    + backend: snowflake (string)
    + host: keboola.snowflakecomputing.com (string)
    + database: keboola_123 (string)
    + schema:  boring_wozniak (string)
    + warehouse: SAPI_PROD (string)
    + user: xzy (string)
    + password: abc (string) - Password is not stored and is returned only after workspace creation

# Group Events
Virtually every interaction of the client (an API call) creates an Event. Apart from that, external events may
also be added via an API. Events are available for 6 months from their creation.
You can access all events created on an account.

Events can be filtered by various filters:
- `sinceId`, `maxId` - Events newer or older than the passed id
- `component` - Component name
- `configurationId` - Configuration id
- `runId` - Run id
- `q` - Advanced search using a query string. [Query string syntax](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax)

The events pagination uses two parameters:
- `limit` - Number of returned events. The default value: 100
- `offset` - Pagination offset

## Events [/v2/storage/events]
### Create Event [POST]
Creates a new external event. The maximum allowed size of an event is 200KB. If this is exceeded,
the HTTP 400 response code is returned.

+ Attributes
    + message (required) - Event message
    + component (required) - Name of a [registered component](#reference/miscellaneous/api-index/component-list)
    + description (optional) - Event description
    + type (optional, enum[string]) - Type of the event
        + Members
            + info
            + success
            + warn
            + error
        + Default: info
    + configurationId (optional) - Id of a configuration executed by the component
    + params (optional, string) - Serialized JSON object with custom data
    + results (optional, string) - Serialized JSON object with custom data
    + duration (optional, number) - Duration of the associated task in seconds
    + runId (optional) - Id of the associated component job

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            component=keboola.test-component&message=This+is+a+word+of+warning&type=warn

+ Response 201 (application/json)
    + Body

            {
                "id": "13008826"
            }

### Events list [GET /v2/storage/events?sinceId={sinceId}&maxId={maxId}&component={component}&configurationId={configurationId}&runId={runId}&q={q}&limit={limit}&offset={offset}]
Lists all events in the project.

+ Parameters
    + sinceId (optional) - Shows only events after the specified Id.
    + maxId (optional) - Shows only events before the passed Id.
    + component (optional) - Shows only events emitted by the specified component.
    + configurationId (optional) - Show only events related to given configuration Id.
    + runId (optional) - Shows only events with the specified run Id.
    + q (optional) - Searches events using advanced [Query string syntax](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax).
    + limit (optional, number) - Pagination limit. Maximum allowed value is `10000`
        + Default: 100
    + offset (optional, number) - Pagination offset
        + Default: 0

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Attributes (array[Event])

## List Bucket Events [/v2/storage/buckets/{bucket_id}/events?sinceId={sinceId}&maxId={maxId}&component={component}&configurationId={configurationId}&runId={runId}&q={q}&limit={limit}&offset={offset}]
### Bucket events list [GET]
Lists all events associated with a particular bucket.

+ Parameters
    + sinceId (optional) - Shows only events after the specified Id.
    + maxId (optional) - Shows only events before the passed Id.
    + component (optional) - Shows only events emitted by the specified component.
    + configurationId (optional) - Shows only events related to given configuration Id.
    + runId (optional) - Shows only events with the specified run Id.
    + q (optional) - Searches events using advanced [Query string syntax](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax).
    + limit (optional, number) - Pagination limit
        + Default: 100
    + offset (optional, number) - Pagination offset
        + Default: 0

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
   + Attributes (array[Event])

## List Table Events [/v2/storage/tables/{table_id}/events?sinceId={sinceId}&maxId={maxId}&component={component}&configurationId={configurationId}&runId={runId}&q={q}&limit={limit}&offset={offset}]
### Table events list [GET]
Lists all events associated with a particular table.

+ Parameters
    + sinceId (optional) - Shows only events after the specified Id.
    + maxId (optional) - Shows only events before the passed Id.
    + component (optional) - Shows only events emitted by the specified component.
    + configurationId (optional) - Shows only events related to the given configuration Id.
    + runId (optional) - Shows only events with the specified run Id.
    + q (optional) - Searches events using advanced [Query string syntax](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax).
    + limit (optional, number) - Pagination limit
        + Default: 100
    + offset (optional, number) - Pagination offset
        + Default: 0

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
   + Attributes (array[Event])

## List Token Events [/v2/storage/tokens/{token_id}/events?sinceId={sinceId}&maxId={maxId}&component={component}&configurationId={configurationId}&runId={runId}&q={q}&limit={limit}&offset={offset}]
### Token events list [GET]
Lists all events associated with a particular token.

+ Parameters
    + sinceId (optional) - Shows only events after the specified Id.
    + maxId (optional) - Shows only events before the passed Id.
    + component (optional) - Shows only events emitted by the specified component.
    + configurationId (optional) - Shows only events related to the given configuration Id.
    + runId (optional) - Shows only events with the specified run Id.
    + q (optional) - Searches events using advanced [Query string syntax](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax).
    + limit (optional, number) - Pagination limit
        + Default: 100
    + offset (optional, number) - Pagination offset
        + Default: 0

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
   + Attributes (array[Event])

## Data Structures

### Event
+ id: 498839405 - Event Id
+ event: storage.workspaceLoaded - Event identifier such as `storage.tableImportDone` or `storage.tableDetail`
+ component: storage - Name of the component that logged the event. Events can be logged by the `storage` component or any other
[registered component](#reference/miscellaneous/api-index/component-list).
+ message: `Table in.c-application-testing.cashier-data was loaded to the workspace workspace_78423 as my-table.` - Human readable description of the event
+ description: `` - Additional description of the event, such as a detailed error description
+ type: `info` (enum[string]) - Type of an event
    + Members
        + info
        + success
        + warn
        + error
+ runId: null - Id of an associated job.
+ created: `2017-02-13T16:42:00+0100` - Datetime when the event was created.
+ configurationId: null - Id of a [configuration](#reference/component-configurations/component-list) used by an external component.
+ objectId: `in.c-application-testing.cashier-data` - Id of the target object of the event - e.g. *id* of table for `storage.tableImportDone event`.
+ objectName: `cashier-data` - Name of the target object - e.g. a *table name* for a `storage.tableImportDone` event.
+ objectType: table - Type of the target object - e.g. *table* for the `storage.tableImportDone` event.
+ context (object) - Details about the origin of the API call that triggered the event
    + remoteAddr
    + httpReferer
    + httpUserAgent
    + apiVersion
    + userAgent
    + async (boolean)
+ params (object) - Arbitrary parameters associated with the event - e.g. CSV file settings for table import
+ results (object) - Arbitrary results of the event
+ performance (object) - Arbitrary performance metrics associated with the event
+ token (object) - Creator of the event
    + id: 1234 - Id of the token
    + name: support@keboola.com - Token owner
+ uri: 498839405 - Event URI.
+ attachments (object) - Arbitrary list of attached files - e.g. backups for table import events


# Group Metadata
You can associate custom metadata with buckets, tables or columns.
Metadata are timestamped key-value pairs separated by the provider, where the provider is the originating component.
Metadata allows you to assign custom information to your resources. Bucket attributes methods are described
below. Work with table and column metadata in the same manner; simply use a table or column instead of a bucket in the url.

## Bucket Metadata [/v2/storage/buckets/{bucket_id}/metadata]

### Create or Update [POST]
Sets multiple metadata with one call. If the given key and provider combination already exist
for the bucket, the data will be updated with the new value and timestamp. All metadata associated
with the bucket are returned in the response.

+ Parameters
    + bucket_id (required) - Id of the bucket

+ Attributes
    + provider (required) - Id of the creating [component](#reference/miscellaneous/api-index/component-list)
    + metadata (required) - Array of metadata objects
        + Metadata (object)
            + key (required)
            + value (required)

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            provider=test-component&metadata%5B0%5D%5Bkey%5D=some-key&metadata%5B0%5D%5Bvalue%5D=Some+value


+ Response 201 (application/json)
    + Body

            [
                {
                    "id": "19509",
                    "key": "some-key",
                    "value": "Some value",
                    "provider": "test-component",
                    "timestamp": "2017-02-13 23:36:10"
                }
            ]

### List [GET]
Metadata can be listed for your bucket column.

+ Parameters
    + bucket_id (required) - Id of the bucket

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "id": "123"
                    "provider": "keboola.some-komponent",
                    "timestamp": "2016-09-19 13:02:11",
                    "key": "attribute_key",
                    "value": "attribute_value"
                },
                {
                    "id": "124"
                    "provider": "keboola.some-komponent",
                    "timestamp": "2016-09-19 13:02:11",
                    "key": "another_attribute_key",
                    "value": "attribute_value"
                }
            ]

### Delete [DELETE /v2/storage/buckets/{bucket_id}/metadata/{metadata_id}]
Deletes the specified metadata item from the bucket.

+ Parameters
    + bucket_id (required) - Id of the bucket
    + metadata_id (required) - Id of the metadata

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204

## Table Metadata [/v2/storage/tables/{table_id}/metadata]

### Create or Update [POST]
Sets multiple metadata with one call. If the given key and provider combination already exist
for the table, the data will be updated with the new value and timestamp. All metadata associated
with the table are returned in the response.

+ Parameters
    + table_id (required) - Id of the table

+ Attributes
    + provider (required) - Id of the creating [component](#reference/miscellaneous/api-index/component-list).
    + metadata (required) - Array of metadata objects
        + Metadata (object)
            + key (required)
            + value (required)

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            provider=test-component&metadata%5B0%5D%5Bkey%5D=some-key&metadata%5B0%5D%5Bvalue%5D=Some+value


+ Response 201 (application/json)
    + Body

            [
                {
                    "id": "19509",
                    "key": "some-key",
                    "value": "Some value",
                    "provider": "test-component",
                    "timestamp": "2017-02-13 23:36:10"
                }
            ]

### List [GET]
Shows all metadata associated with the specified table.

+ Parameters
    + table_id (required) - Id of the table

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "id": "123"
                    "provider": "keboola.some-komponent",
                    "timestamp": "2016-09-19 13:02:11",
                    "key": "attribute_key",
                    "value": "attribute_value"
                },
                {
                    "id": "124"
                    "provider": "keboola.some-komponent",
                    "timestamp": "2016-09-19 13:02:11",
                    "key": "another_attribute_key",
                    "value": "attribute_value"
                }
            ]

### Delete [DELETE /v2/storage/tables/{table_id}/metadata/{metadata_id}]
Deletes the specified metadata item from the table.

+ Parameters
    + table_id (required) - Id of the table
    + metadata_id (required) - Id of the metadata

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204

## Column Metadata [/v2/storage/columns/{column_id}/metadata]

### Create or Update [POST]
Sets multiple metadata with one call. If the given key and provider combination already exist
for the column, the data will be updated with the new value and timestamp. All metadata associated
with the column are returned in the response.

+ Parameters
    + column_id (required) - Id of the table

+ Attributes
    + provider (required) - Id of the creating [component](#reference/miscellaneous/api-index/component-list)
    + metadata (required) - Array of metadata objects
        + Metadata (object)
            + key (required)
            + value (required)

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            provider=test-component&metadata%5B0%5D%5Bkey%5D=some-key&metadata%5B0%5D%5Bvalue%5D=Some+value


+ Response 201 (application/json)
    + Body

            [
                {
                    "id": "19509",
                    "key": "some-key",
                    "value": "Some value",
                    "provider": "test-component",
                    "timestamp": "2017-02-13 23:36:10"
                }
            ]

### List [GET]
Shows all metadata associated with the specified column.

+ Parameters
    + column_id (required) - Id of the column

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "id": "123"
                    "provider": "keboola.some-komponent",
                    "timestamp": "2016-09-19 13:02:11",
                    "key": "attribute_key",
                    "value": "attribute_value"
                },
                {
                    "id": "124"
                    "provider": "keboola.some-komponent",
                    "timestamp": "2016-09-19 13:02:11",
                    "key": "another_attribute_key",
                    "value": "attribute_value"
                }
            ]

### Delete [DELETE /v2/storage/columns/{column_id}/metadata/{metadata_id}]
Deletes the specified metadata item from the column.

+ Parameters
    + column_id (required) - Id of the column
    + metadata_id (required) - Id of the metadata

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204

# Group Jobs
Jobs are objects that manage asynchronous tasks, these are all potentially long-running actions such as
loading table data, snapshotting, table structure modifications. Jobs are created by actions on target
resources, e.g., an [Asynchronous import request](#reference/tables/load-data-asynchronously/import-data) creates
a table import job. For each new job, the Id and URL of the job is returned.

When working with jobs, follow these steps:
1. **Start the job** - Job resource is created and a URL for polling is returned.
2. **Poll job status** - Poll the job URL in a loop until the job `status` is set to `success` or `error`.
3. **Check the results** - When the job is finished, the `results` field will contain the actual result of the original request.

Available Statuses:
- `waiting` - The job is in the queue and is waiting for execution.
- `processing` - The job is being processed by a worker.
- `success` - The job is done with a success.
- `error` - The job is done with an error.

## List Jobs [/v2/storage/jobs]
### Jobs list [GET]
+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "id": 22077337,
                    "status": "success",
                    "url": "https://connection.keboola.com/v2/storage/jobs/22077337",
                    "tableId": null,
                    "operationName": "workspaceLoad",
                    "operationParams": {
                        "workspaceId": "78423",
                        "preserve": false,
                        "input": [
                            {
                                "source": "in.c-application-testing.cashier-data",
                                "destination": "my-table"
                                }
                        ],
                        "queue": "main_fast"
                    },
                    "createdTime": "2017-02-13T16:41:18+0100",
                    "startTime": "2017-02-13T16:41:18+0100",
                    "endTime": "2017-02-13T16:42:00+0100",
                    "runId": null,
                    "results": null,
                    "creatorToken": {
                        "id": "27978",
                        "description": "ondrej.popelka@keboola.com"
                        },
                    "metrics": {
                        "inCompressed": false,
                        "inBytes": 0,
                        "inBytesUncompressed": 0,
                        "outCompressed": true,
                        "outBytes": 7168,
                        "outBytesUncompressed": 0
                    }
                }
            ]

## Manage Jobs [/v2/storage/jobs/{jobId}]
### Job detail [GET]
Retrieves information about a single job.

+ Parameters
    + jobId - Id of the job

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "id": 22077337,
                "status": "success",
                "url": "https://connection.keboola.com/v2/storage/jobs/22077337",
                "tableId": null,
                "operationName": "workspaceLoad",
                "operationParams": {
                    "workspaceId": "78423",
                    "preserve": false,
                    "input": [
                        {
                            "source": "in.c-application-testing.cashier-data",
                            "destination": "my-table"
                        }
                    ],
                    "queue": "main_fast"
                },
                "createdTime": "2017-02-13T16:41:18+0100",
                "startTime": "2017-02-13T16:41:18+0100",
                "endTime": "2017-02-13T16:42:00+0100",
                "runId": null,
                "results": null,
                "creatorToken": {
                    "id": "27978",
                    "description": "ondrej.popelka@keboola.com"
                },
                "metrics": {
                    "inCompressed": false,
                    "inBytes": 0,
                    "inBytesUncompressed": 0,
                    "outCompressed": true,
                    "outBytes": 7168,
                    "outBytesUncompressed": 0
                }
            }


# Group Files
File Storage is used for storing arbitrary files. This is used for data imported into tables and data exported
from tables. Additionally, the File storage can be used for data backup and exchange between project participants.

File Storage is heavily used for data exchange between Storage API and other components, import backups, etc.
This kind of data is not kept forever. By default, all files are stored for **6 months**. They can be stored permanently by
using the `isPermanent` parameter. Files can also be tagged to categorize file uploads. When the `X-KBC-RunId` header is
provided, it is stored as the file `runId`.

Internally, all files are stored encrypted on [Amazon S3](http://docs.aws.amazon.com/AmazonS3/latest/dev/Welcome.html)
and are private. When you access the file through the API, a URL with one hour expiration is generated. If you require
a permanent URL, you can set the file as `public`.

Large files may be split into slices (chunks). A sliced file must have the `sliced` parameter set to `true`. In that case
the S3 key points to a **manifest file**. The manifest file contains the actual list of uploaded chunks. When uploading a sliced
file, you have to use the provided key as a prefix for chunks and generate the manifest file with the list of uploaded chunks.
When a CSV file is imported into Storage Tables, there is no difference between a normal and a sliced file.

**Example:**

Assume that the [upload method](#reference/files/upload-file/) returns the following S3 key `exp-180/11/files/2014/02/25/11085.import`.
Then you can upload e.g. these files:
- exp-180/11/files/2014/02/25/11085.import_001
- exp-180/11/files/2014/02/25/11085.import_002
- exp-180/11/files/2014/02/25/11085.import_003

Then create the following manifest file:
```
{
  "entries": [
    {"url":"s3://kbc-sapi-files-devel/exp-180/11/files/2014/02/25/11085.import_001"},
    {"url":"s3://kbc-sapi-files-devel/exp-180/11/files/2014/02/25/11085.import_002"},
    {"url":"s3://kbc-sapi-files-devel/exp-180/11/files/2014/02/25/11085.import_003"}
  ]
}
```

And then, upload that manifest file to the key `exp-180/11/files/2014/02/25/11085.import_manifest`. See our
[Developers documentation](https://developers.keboola.com/integrate/storage/api/import-export/#working-with-sliced-files)
for a more detailed guide.

## Upload File [/v2/storage/files/prepare]
### Create File Resource [POST]
This method allows you to upload a file to KBC File Storage. The upload should be done in two steps:
1. Create a new file resource (use this API call).
2. Use the provided credentials to actually upload the file data to the Amazon S3 storage.

The credentials are generated either as standard *AWS credentials* (`federationToken` set to true) or for an HTTP *legacy form submission*
(`federationToken` set to false). The *legacy form submission* method is *deprecated*. Please use always the federation token method and any of the many S3 clients or libraries to
upload the files. The *legacy form submission* method is less reliable and does not work in all regions (e.g. eu-central-1, ap-northeast-2).
For a more detailed guide on the file upload, see the corresponding part of the
[Developers documentation](https://developers.keboola.com/integrate/storage/api/import-export/#manually-uploading-a-file).

+ Attributes
    + name (required) - File name
    + sizeBytes (optional, number) - File size in bytes
    + contentType (optional) - File [MIME Type](https://en.wikipedia.org/wiki/Media_type)
        Default: `application/octet-stream`
    + isPublic (optional, boolean) - When true, the file URL will be permanent and publicly accessible.
        Default: false
    + isPermanent (optional, boolean) - Keeps a file forever. If false, the file will be **deleted after 6 months**.
        Default: false
    + notify (optional, boolean) - Notifies project administrators that a file was uploaded.
        Default: false
    + tags[] (optional) - Assigns one or more tags to the file.
    + federationToken (optional, boolean) - Must be set to `true`.
        Default: false
    + sliced (optional, boolean) - If true, multiple chunks of a file are allowed to be uploaded. Must be used with `federationToken`.
        Default: false
    + isEncrypted (optional, boolean) - If true, the file content will be encrypted in the S3 storage.
        Default: false

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

                name=someFile.csv&tags%5B0%5D=tag1&tags%5B1%5D=tag2&sizeBytes=12345&federationToken=true

+ Response 201 (application/json)
    + Body

            {
                "id": 236518631,
                "created": "2017-02-14T10:34:45+0100",
                "isPublic": false,
                "isSliced": false,
                "isEncrypted": false,
                "name": "somefile.csv",
                "url": "https://s3.amazonaws.com/kbc-sapi-files/exp-180/578/files/2017/02/14/236518630.somefile.csv?X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKI...0214%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20170214T093446Z&X-Amz-SignedHeaders=host&X-Amz-Expires=3600&X-Amz-Signature=374...a4c",
                "region": "us-east-1",
                "sizeBytes": 12345,
                "tags": [
                    "tag1",
                    "tag2"
                ],
                "maxAgeDays": 180,
                "runId": null,
                "runIds": [],
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "uploadParams": {
                    "key": "exp-180/578/files/2017/02/14/236518630.somefile.csv",
                    "bucket": "kbc-sapi-files",
                    "acl": "private",
                    "credentials": {
                        "AccessKeyId": "ASI...D2Q",
                        "SecretAccessKey": "H+/...BYy",
                        "SessionToken": "Ago...sUF",
                        "Expiration": "2017-02-14T21:34:46+00:00"
                    }
                }
            }

## List Files [/v2/storage/files?sinceId={sinceId}&maxId={maxId}&tags={tags}&q={q}&runId={runId}&limit={limit}&offset={offset}]
### List Files [GET]
Lists all files uploaded by your token. If the `canReadAllFileUploads` permission is set for your token,
all file uploads for project will be returned.

*Note*: There can be a delay of up to one second before any file change is propagated into the
list of files (including addition and removal of a file).

+ Parameters
    + sinceId (optional) - Shows only files after the specified Id.
    + maxId (optional) - Shows only files before the passed Id.
    + tags (optional) - Shows only files with one or more of the specified tags.
    + q (optional) - Searches events using advanced [Query string syntax](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax).
    + runId (optional) - Shows only files with the given run Id.
    + limit (optional, number) - Pagination limit
        + Default: 100
    + offset (optional, number) - Pagination offset
        + Default: 0

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "id": 236504177,
                    "created": "2017-02-14T09:46:25+0100",
                    "isPublic": false,
                    "isSliced": false,
                    "isEncrypted": true,
                    "name": "235728260.csvmanifest",
                    "url": "https://s3.amazonaws.com/kbc-sapi-files/exp-180/578/files/2017/02/14/236504176.235728260.csvmanifest?X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJ2N244XSWYVVYVLQ%2F20170214%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20170214T094038Z&X-Amz-SignedHeaders=host&X-Amz-Expires=3600&X-Amz-Signature=9872bf99808caf6e65bab96f8b2fb5ed9d35fa12ef33d90a56bfc6253634ffe8",
                    "region": "us-east-1",
                    "sizeBytes": 133,
                    "tags": [],
                    "maxAgeDays": 180,
                    "runId": null,
                    "runIds": [],
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    }
                }
            ]


## Manage Files [/v2/storage/files/{file_id}]
### File detail [GET /v2/storage/files/{file_id}?federationToken={federationToken}]
Returns detailed information about a single file.

+ Parameters
    + file_id (required, number) - File Id
    + federationToken (optional, boolean) - Return AWS credentials with permissions for a direct file download from S3. The credentials are valid for 12 hours.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "id": 236504177,
                "created": "2017-02-14T09:46:25+0100",
                "isPublic": false,
                "isSliced": false,
                "isEncrypted": true,
                "name": "235728260.csvmanifest",
                "url": "https://s3.amazonaws.com/kbc-sapi-files/exp-180/578/files/2017/02/14/236504176.235728260.csvmanifest?X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKI...214%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20170214T101017Z&X-Amz-SignedHeaders=host&X-Amz-Expires=3600&X-Amz-Signature=d76...288",
                "region": "us-east-1",
                "sizeBytes": 133,
                "tags": [],
                "maxAgeDays": 180,
                "runId": null,
                "runIds": [],
                "creatorToken": {
                "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "s3Path": {
                    "bucket": "kbc-sapi-files",
                    "key": "exp-180/578/files/2017/02/14/236504176.235728260.csvmanifest"
                },
                "credentials": {
                    "AccessKeyId": "ASI...O7A",
                    "SecretAccessKey": "gIT...RtE",
                    "SessionToken": "Ago...QU=",
                    "Expiration": "2017-02-14T22:10:17+00:00"
                }
            }

### Delete File [DELETE]
Deletes a file from storage.

+ Parameters
    + file_id (required, number) - File Id

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204


## Create Tag [/v2/storage/files/{file_id}/tags]
### Add Tag [POST]
Adds a new tag to a file.

+ Parameters
    + file_id (required, number) - File id

+ Attributes
    + tag (required) - Tag name

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            tag=image

+ Response 204

## Manage Tags [/v2/storage/files/{file_id}/tags/{tag_name}]
### Delete Tag [DELETE]
Deletes a single tag from the specified file.

+ Parameters
    + file_id (required, number) - File id
    + tag_name (required) - Tag name

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204

# Group Tickets
Tickets are unique sequential 64 bit IDs. Tickets are used to generate unique run identifiers for
all components using Keboola Connection.

## Generate Unique ID [/v2/storage/tickets/]
### Generate New Id [POST]

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 201 (application/json)
    + Body

            {
                "id": 123454352345
            }

# Group Component Configurations
Component Configuration represents specific settings of a
[registered Component](#reference/miscellaneous/api-index/component-list)
in a project. See the [Developers Documentation](https://developers.keboola.com/integrate/storage/api/configurations/)
for examples and use cases.
This is a utility resource available only for master tokens and tokens with the `canManageBuckets` permission.
Configurations may include *Configuration Rows* if they are composed of multiple objects. Configuration rows are
used in case parts of the configuration are supposed to be updated independently.
Configurations are automatically versioned. Configuration Rows are versioned separately, but they are also recorded as
changes of the configuration. The `configuration` and
`rows.configuration` fields can contain arbitrary objects. The content and interpretation of those fields is fully
defined by the component.

## List Components [/v2/storage/components?include={include}&componentType={componentType}&isDeleted={isDeleted}]
### Get components [GET]
Use this API call to obtain the definitions of all components available in KBC. For more information about the
KBC Component architecture, see the [Developers documentation](https://developers.keboola.com/overview/)

+ Parameters
    + componentType (optional) - Component type - `extractor`, `writer`, `application`, etc.
    + include (optional) - Comma separated list of resources to include. Available resources: `configuration` and `rows`.
    + isDeleted (optional, boolean) - If true, it returns only components with deleted configurations.
        Default: false

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200
    + Headers

            Content-type: application/json

    + Body

            [
                {
                    "id": "keboola.app-tree",
                    "type": "application",
                    "name": "Tree depth",
                    "description": "Application which computes a tree depth.",
                    "longDescription": "This application computes levels in a table representing a tree (e.g. product categories). The tree data must be stored in a child-parent relationship. A column named **levels** will be added to the table (root nodes will have number 1). Additionally, a column named **root** will be added, containing the ID of the root item.",
                    "hasUI": false,
                    "hasRun": false,
                    "ico32": "https://d3iz2gfan5zufq.cloudfront.net/images/cloud-services/keboola.app-tree-32-1.png",
                    "ico64": "https://d3iz2gfan5zufq.cloudfront.net/images/cloud-services/keboola.app-tree-64-1.png",
                    "data": {
                        "definition": {
                            "type": "aws-ecr",
                            "uri": "147946154733.dkr.ecr.us-east-1.amazonaws.com/keboola/app-tree",
                            "tag": "latest",
                            "repository": {
                                "region": "us-east-1"
                            }
                        },
                        "cpu_shares": 1024,
                        "memory": "8024m",
                        "configuration_format": "json",
                        "process_timeout": 10800
                    },
                    "flags": [
                        "genericDockerUI",
                        "genericDockerUI-tableInput",
                        "genericDockerUI-tableOutput",
                        "excludeFromNewList"
                    ],
                    "configurationSchema": {
                        "title": "Parameters",
                        "type": "object",
                        "properties": {
                            "idColumn": {
                                "type": "string",
                                "title": "ID Column",
                                "description": "Name of the column containing row identifier",
                                "default": "categoryId"
                            },
                            "parentColumn": {
                                "type": "string",
                                "title": "Parent Column",
                                "description": "Name of the column containing parent identifier",
                                "default": "categoryParentId"
                            }
                        },
                        "required": [
                            "idColumn",
                            "parentColumn"
                        ]
                    },
                    "emptyConfiguration": {},
                    "uiOptions": {},
                    "configurationDescription": "The tree data must be stored in a child-parent relationship. A column named **levels** will be added to the table (root nodes will have number 1). Additionally, a column named **root** will be added, containing the ID of the root item.\n\nSample input \n-------------------\n\ncategoryId | categoryParentId\t| title\n--- | --- | --- \n1 |\t0 | foo\n2 | 1 | bar\n3 | 1 | baz\n4 | 2 | buzz\n\n\nSample output\n-------------------\n\ncategoryId | categoryParentId | title | levels | root\n--- | --- | --- | --- | --- |\n1 |\t0 | foo | 1 | 1 |\n2 | 1 | bar | 2 | 1 |\n3 | 1 | baz | 2 | 1 |\n4 | 2 | buzz | 3 | 1 |",
                    "uri": "https://syrup.keboola.com/docker/keboola.app-tree",
                    "configurations": [
                        {
                            "id": "236552566",
                            "name": "teest2",
                            "description": "",
                            "created": "2017-02-14T12:12:30+0100",
                            "creatorToken": {
                                "id": 27978,
                                "description": "ondrej.popelka@keboola.com"
                            },
                            "version": 2,
                            "changeDescription": "Configuration deleted",
                            "isDeleted": true,
                            "currentVersion": {
                                "created": "2017-02-14T12:12:45+0100",
                                "creatorToken": {
                                    "id": 27978,
                                    "description": "ondrej.popelka@keboola.com"
                                },
                                "changeDescription": "Configuration deleted"
                            }
                        }
                    ]
                }
            ]

## Component Configurations [/v2/storage/components/{component_id}/configs]
### List configurations [GET /v2/storage/components/{component_id}/configs?isDeleted={isDeleted}]
Lists all configurations for a component including all config rows.

+ Parameters
    + component_id (required) - Id of the component
    + isDeleted (optional, boolean) - When true, only deleted configurations will be returned. When false, only current configurations will be returned.
        + Default: false

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "id": "main-1",
                    "name": "Main 1",
                    "description": "",
                    "created": "2016-05-11T14:33:50+0200",
                    "creatorToken": {
                        "id": 67,
                        "description": "dev@keboola.com"
                    },
                    "version": 2,
                    "changeDescription": "Row row1 added",
                    "isDeleted": false,
                    "configuration": {
                        "key1": "val1"
                    },
                    "currentVersion": {
                        "created": "2016-05-11T14:33:50+0200",
                        "creatorToken": {
                            "id": 67,
                            "description": "dev@keboola.com"
                        },
                        "changeDescription": "Row row1 added"
                    },
                    "rowsSortOrder": [],
                    "rows": [
                        {
                            "id": "row1",
                            "configuration": {
                                "key2": "val2"
                            },
                            "state": {},
                            "version": 1,
                            "created": "2016-05-11T14:33:50+0200",
                            "creatorToken": {
                                "id": 67,
                                "description": "dev@keboola.com"
                            },
                            "changeDescription": null
                        }
                    ],
                    "state": {}
                }
            ]

### Create Configuration [POST]
Creates a new component configuration.

+ Parameters
    + component_id (required) - Id of the Component

+ Attributes
    + name (required) - Configuration name
    + configurationId (optional) - Configuration Id (must be unique for each component type). If not set, it will be auto-generated.
    + description (optional) - Configuration description
    + configuration (optional) - Serialized configuration JSON; the maximum allowed size is 4MB
    + state (optional) - Serialized state configuration JSON; the maximum allowed size is 4MB
    + changeDescription (optional) - Description of the configuration modification

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            name=My+new+configuration&configuration=%7B%22key%22%3A%22value%22%2C+%22key2%22%3A%22value2%22%7D&changeDescription=Initial+configuration

+ Response 201 (application/json)
    + Body

            {
                "id": "236606822",
                "name": "My new configuration",
                "description": "",
                "created": "2017-02-14T14:38:26+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "version": 1,
                "changeDescription": "Initial configuration",
                "isDeleted": false,
                "configuration": {
                    "key": "value",
                    "key2": "value2"
                },
                "state": {},
                "currentVersion": {
                    "created": "2017-02-14T14:38:26+0100",
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    },
                    "changeDescription": "Initial configuration"
                }
            }

## Manage Configurations [/v2/storage/components/{component_id}/configs/{config_id}]
### Configuration Detail [GET]
Gets the component configuration detail.

+ Parameters
    + component_id (required) - Id of the component
    + config_id (required) - Id of the configuration

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)

            {
                "id": "236606822",
                "name": "My new configuration",
                "description": "",
                "created": "2017-02-14T14:38:26+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "version": 1,
                "changeDescription": "Initial configuration",
                "isDeleted": false,
                "configuration": {
                    "key": "value",
                    "key2": "value2"
                },
                "rowsSortOrder": [],
                "rows": [],
                "state": {},
                "currentVersion": {
                    "created": "2017-02-14T14:38:26+0100",
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    },
                    "changeDescription": "Initial configuration"
                }
            }

### Update Configuration [PUT]
Updates an existing configuration. When the configuration is updated, a new version is automatically created and
marked as `currentVersion`.

+ Parameters
    + component_id (required) - Id of the component
    + config_id (required) - Id of the configuration

+ Attributes
    + name (required) - Configuration name
    + description (optional) - Configuration description
    + configuration (optional) - Serialized configuration JSON; the maximum allowed size is 4MB
    + state (optional) - Serialized configuration state JSON; the maximum allowed size is 4MB
    + changeDescription (optional) - Description of the configuration modification
    + rowsSortOrder (optional) - Array of row ids in desired order, you have to specify all row ids

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            configuration=%7B%22key%22%3A%22value%22%2C+%22key2%22%3A%22value2%22%2C+%22key3%22%3A+%22value3%22%7D&changeDescription=Added+new+key


+ Response 200 (application/json)
    + Body

            {
                "id": "236606822",
                "name": "My new configuration",
                "description": "",
                "created": "2017-02-14T14:38:26+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "version": 2,
                "changeDescription": "Added new key",
                "isDeleted": false,
                "configuration": {
                    "key": "value",
                    "key2": "value2",
                    "key3": "value3"
                },
                "rowsSortOrder": [],
                "rows": [],
                "state": {},
                "currentVersion": {
                    "created": "2017-02-14T14:48:41+0100",
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    },
                    "changeDescription": "Added new key"
                }
            }


### Delete Configuration [DELETE]
Deletes a configuration. When a configuration is deleted, it is only marked as deleted and remains still available in the system.
You can [list deleted](#reference/component-configurations/component-configs/list-configs) configurations, or
[restore deleted](#reference/component-configurations/manage-configs/restore-deleted-config) configurations.
Other operations with deleted configurations are restricted.

Calling this API call on a deleted configuration will remove it permanently. I.e. to permanently remove a configuration
you have to delete it twice (call twice this API resource). The `canPurgeTrash` permission must be set for your token.

+ Parameters
    + component_id (required) - Id of the component
    + config_id (required) - Id of the configuration

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 204


## Configuration Restore [/v2/storage/components/{component_id}/configs/{config_id}/restore]
### Restore Deleted Configuration [POST]
Removes the `isDeleted` flag of a deleted configuration. This makes a new version of the configuration
and the configuration becomes available for other API calls.

+ Parameters
    + component_id (required) - Id of the component
    + config_id (required) - Id of the configuration

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)

            {
                "id": "236606822",
                "name": "My new configuration",
                "description": "",
                "created": "2017-02-14T14:38:26+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "version": 4,
                "changeDescription": "Configuration restored",
                "isDeleted": false,
                "currentVersion": {
                    "created": "2017-02-14T15:48:39+0100",
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    },
                    "changeDescription": "Configuration restored"
                }
            }


## Publishing [/v2/storage/components/{component_id}/configs/{config_id}/publish]
A configuration can be in the `published` or `draft` mode. The
[configuration detail API call](#reference/component-configurations/manage-configs/config-detail) returns
the latest version of a configuration. The latest published version can be retrieved by the
[Configuration version API call](#reference/component-configurations/manage-configs-versions/version-detail) with
the version `latestPublished`.

### Publish Configuration [POST]
Marks the latest version of a configuration as published.

+ Parameters
    + component_id (required) - Component Id
    + config_id (required) - Configuration Id

+ Attributes
    + description (required) - Version description

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            description=publishing+configuration

+ Response 200 (application/json)

            {
                "id": "236606822",
                "name": "My new configuration",
                "description": "",
                "created": "2017-02-14T14:38:26+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "version": 4,
                "changeDescription": "Configuration restored",
                "isDeleted": false,
                "published": {
                    "date": "2017-02-14T23:15:52+0100",
                    "description": "publishing configuration",
                    "token": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    }
                },
                "currentVersion": {
                    "created": "2017-02-14T15:48:39+0100",
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    },
                    "changeDescription": "Configuration restored"
                }
            }


## List Configuration Versions [/v2/storage/components/{component_id}/configs/{config_id}/versions]
### Versions list [GET /v2/storage/components/{component_id}/configs/{config_id}/versions?include={include}&limit={limit}&offset={offset}]
Lists all versions of a component configuration.

+ Parameters
    + include (optional) - Comma separated list of information to be retrieved; possible fields are `name`, `description` and `configuration`.
        Default: `name,description`
    + limit (optional, number) - Pagination limit
        Default: 100
    + offset (optional, number) - Pagination offset
        Default: 0

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "version": 2,
                    "created": "2017-02-09T21:11:02+0100",
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    },
                    "changeDescription": "Add input table in.c-afnhk.tree-test",
                    "isDeleted": false,
                    "name": "test",
                    "description": ""
                },
                {
                    "version": 1,
                    "created": "2017-02-09T21:10:31+0100",
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    },
                    "changeDescription": "",
                    "isDeleted": false,
                    "name": "test",
                    "description": ""
                }
            ]

## Manage Configuration Versions [/v2/storage/components/{component_id}/configs/{config_id}/versions/{version_id}]
### Version Detail [GET]
Gets configuration version.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration
    + version_id (required, string) - Version number or `latestPublished` to retrieve the latest published version

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "version": 1,
                "created": "2017-02-09T21:10:31+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "changeDescription": "",
                "isDeleted": false,
                "name": "test",
                "description": "",
                "configuration": {},
                "rowsSortOrder": [],
                "rows": []
            }

## Rollback Configuration Version [/v2/storage/components/{component_id}/configs/{config_id}/versions/{version_id}/rollback]
### Rollback Version [POST]
Rollbacking a configuration version actually creates a new configuration version identical to the
one you specified. `state` attributes of the config and rows is preserved, if any row is recreated, it will have the last existing state.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration
    + version_id (required, number) - Version number to rollback to

+ Attributes
    + changeDescription (optional) - Description of a version change

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            changeDescription=change+description

+ Response 201 (application/json)

        {
            "version": 3
        }

## Copy Configurations [/v2/storage/components/{component_id}/configs/{config_id}/versions/{version_id}/create]
### Create Configuration Copy [POST]
Creates a new configuration from the specified configuration version.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration to copy
    + version_id (required, number) - Version number to copy

+ Attributes
    + name (required) - Name of the new configuration
    + description (optional) - Description of the new configuration
    + changeDescription (optional) - Version change description

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            name=Configuration+copy&changeDescription=Testing+Copying

+ Response 201 (application/json)

        {
            "id": 4
        }


## Create or List Configuration Rows [/v2/storage/components/{component_id}/configs/{config_id}/rows]
### Create Configuration Row [POST]
Creates a new row (item) of an existing configuration.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration

+ Attributes
    + rowId (optional) - Row id (must be unique for each configuration); if not set, it will be generated
    + configuration (optional) - Serialized configuration JSON; the maximum allowed size is 4MB
    + state (optional) - Serialized configuration state JSON; the maximum allowed size is 4MB
    + name (optional, string) - Row name
    + description (optional, string) - Row description
    + isDisabled (optional, boolean) - Disabled flag
    + changeDescription (optional) - Version change description

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            configuration=%7B%22host%22%3A+%22localhost%22%2C+%22port%22%3A+4406%7D&changeDescription=Added+new+row

+ Response 201 (application/json)

            {
                "id": "236781646",
                "configuration": {
                    "host": "localhost",
                    "port": 4406
                },
                "state": {},
                "name": "",
                "description": "",
                "isDisabled": false,
                "version": 1,
                "created": "2017-02-15T00:05:32+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "changeDescription": "Added new row"
            }


### Row List [GET]
Gets configuration rows.

+ Request
    + Headers

            X-StorageApi-Token: your_token


+ Response 200 (application/json)

            [
                {
                    "id": "236781529",
                    "configuration": {},
                    "state": {},
                    "name": "",
                    "description": "",
                    "isDisabled": false,
                    "version": 1,
                    "created": "2017-02-15T00:04:42+0100",
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    },
                    "changeDescription": "Row 236781529 added"
                },
                {
                    "id": "236781639",
                    "configuration": {
                        "host": "localhost",
                        "port": 4406
                    },
                    "state": {},
                    "name": "",
                    "description": "",
                    "isDisabled": false,
                    "version": 1,
                    "created": "2017-02-15T00:05:29+0100",
                    "creatorToken": {
                        "id": 27978,
                        "description": "ondrej.popelka@keboola.com"
                    },
                    "changeDescription": "Added new row"
                }
            ]


## Manage Configuration Rows [/v2/storage/components/{component_id}/configs/{config_id}/rows/{row_id}]
### Row detail [GET]
Gets configuration rows.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration
    + row_id (required) - Id of the configuration row

+ Request
    + Headers

            X-StorageApi-Token: your_token


+ Response 200 (application/json)

            {
                "id": "236781529",
                "configuration": {},
                "state": {},
                "name": "",
                "description": "",
                "isDisabled": false,
                "version": 1,
                "created": "2017-02-15T00:04:42+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "name@example.com"
                },
                "changeDescription": "Row 236781529 added"
            }

### Update Row [PUT]
Modifies the content of a single row in a configuration. Note that configuration rows are versioned
independently on the configurations.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration
    + row_id (required) - Id of the configuration row

+ Attributes
    + configuration (optional) - Serialized configuration JSON; the maximum allowed size is 4MB
    + state (optional) - Serialized configuration state JSON; the maximum allowed size is 4MB
    + name (optional, string) - Row name
    + description (optional, string) - Row description
    + isDisabled (optional, boolean) - Disabled flag
    + changeDescription (optional) - Version change description

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            configuration=%7B%22host%22%3A+%22localhost%22%2C+%22port%22%3A+null%7D&changeDescription=change+description

+ Response 200 (application/json)

            {
                "id": "236781529",
                "configuration": {
                    "host": "localhost",
                    "port": null
                },
                "state": {},
                "name": "",
                "description": "",
                "isDisabled": false,
                "version": 2,
                "created": "2017-02-15T00:04:42+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "changeDescription": "change description"
            }


### Delete Row [DELETE]
Deletes a configuration row. A configuration row is deleted permanently and cannot be restored.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration
    + row_id (required) - Id of the configuration row

+ Request
    + Headers

            X-StorageApi-Token: your_token


+ Response 204

## List Configuration Row Versions [/v2/storage/components/{component_id}/configs/{config_id}/rows/{row_id}/versions]
### Versions list [GET /v2/storage/components/{component_id}/configs/{config_id}/rows/{row_id}/versions?include={include}&limit={limit}&offset={offset}]
List versions of a given configuration Row of a given Configuration.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration
    + row_id (required) - Id of the configuration row
    + include (optional) - Comma separated list of information to retrieve; it may contain: `configuration`
        Default: `configuration`
    + limit (optional, number) - Pagination limit
        Default: 100
    + offset (optional, number) - Pagination offset
        Default: 0

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200
    + Headers

            Content-type: application/json

    + Body

            [
                {
                    "version": 2,
                    "name": "",
                    "description": "",
                    "isDisabled": false,
                    "created": "2015-08-12T12:33:04+0200",
                    "creatorToken": {
                        "id": 1392,
                        "description": "martin@keboola.com"
                    },
                    "changeDescription": "Cause of the change"
                },
                {
                    "version": 1,
                    "name": "",
                    "description": "",
                    "isDisabled": false,
                    "created": "2015-08-10T22:00:55+0200",
                    "creatorToken": {
                        "id": 1392,
                        "description": "martin@keboola.com"
                    },
                    "changeDescription": "Some other cause of the change"
                }
            ]

## Manage Configuration Row Versions [/v2/storage/components/{component_id}/configs/{config_id}/rows/{row_id}/versions/{version_id}]
### Version detail [GET]
Gets details about the Configuration Row version.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration
    + row_id (required) - Id of the configuration row
    + version_id (required) - Id of the configuration row version

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            {
                "name": "",
                "description": "",
                "isDisabled": false,
                "version": 1,
                "created": "2015-08-10T22:00:55+0200",
                "creatorToken": {
                    "id": 1392,
                    "description": "martin@keboola.com"
                },
                "changeDescription": "Some other cause of the change"
                "configuration": {}
            }


## Rollback Configuration Row Version [/v2/storage/components/{component_id}/configs/{config_id}/rows/{row_id}/versions/{version_id}/rollback]
### Rollback Version [POST]
Rollbacks row to a previous version. This operation actually creates a new Row version with identical
content to be rollbacked to.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration
    + row_id (required) - Id of the configuration row
    + version_id (required) - Id of the configuration row version to rollback to

+ Attributes
    + changeDescription (optional) - Version change description

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            changeDescription=Rollback+to+previous+version

+ Response 201 (application/json)

            {
                "id": "236781646",
                "configuration": {
                    "host": "localhost",
                    "port": 4406
                },
                "state": {},
                "name": "",
                "description": "",
                "isDisabled": false,
                "version": 2,
                "created": "2017-02-15T00:05:32+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "changeDescription": "Rollback to previous version"
            }


## Copy Configuration Rows [/v2/storage/components/{component_id}/configs/{config_id}/rows/{row_id}/versions/{version_id}/create]
### Create Configuration Row copy [POST]
Creates a new configuration row from an existing row version.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration
    + row_id (required) - Id of the configuration row
    + version_id (required) - Id of the configuration row version to rollback to

+ Attributes
    + targetConfigId (optional) - Copy the row to another existing configuration. If not provided, the row will be copied
    to the original configuration.
    + changeDescription (optional) - Version change description

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            changeDescription=Copy+to+another+row&targetConfigId=236606822

+ Response 201 (application/json)

            {
                "id": "236791247",
                "configuration": {
                    "host": "localhost",
                    "port": 4406
                },
                "name": "",
                "description": "",
                "isDisabled": false,
                "version": 1,
                "created": "2017-02-15T00:38:58+0100",
                "creatorToken": {
                    "id": 27978,
                    "description": "ondrej.popelka@keboola.com"
                },
                "changeDescription": "Copy to another row"
            }

## Create or List Configuration Workspaces [/v2/storage/components/{component_id}/configs/{config_id}/workspaces]
### Create Configuration Workspaces [POST]
Creates a new workspace for an existing configuration.

+ Parameters
    + component_id (required) - Id of the component - e.g. `keboola.ex-db-mysql`
    + config_id (required) - Id of the configuration

+ Attributes
    + backend: snowflake (optional, enum[string]) - Workspace backend. When omitted, the default backend is used.
        + Members
            + redshift
            + snowflake

+ Request (application/x-www-form-urlencoded)
    + Headers

            X-StorageApi-Token: your_token

    + Body

            backend=snowflake

+ Response 201 (application/json)

   + Attributes (WorkspaceCreated)


### Workspace List [GET]
Returns all workspaces for the component configuration.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)

   + Attributes (array[Workspace])

# Group Search
## Search Tables [/v2/storage/search/tables?metadataKey={metadataKey}&metadataValue={metadataValue}&metadataProvider={metadataProvider}&include={include}]

### Search Tables [GET]
Search all tables accessible by the token by either metadataKey, metadataValue or metadataProvider. By default, all tables are returned with their
attributes and information about the containing bucket. At least one of parameters metadataKey|metadataValue|metadataProvider must be provided.

+ Parameters
    + include (optional, enum[string]) - Comma separated list of resources to include for each table.
        + Members
            + attributes
            + buckets
            + columns
            + metadata
            + columnMetadata
        + Default: attributes,metadata
    + metadataKey (optional, string) - string to search with exact match on one of existing metadata.key
        + Default: NULL
    + metadataValue (optional, string) - string to search with exact match on one of existing metadata.value
        + Default: NULL
    + metadataProvider (optional, string) - string to search with exact match on one of existing metadata.provider
        + Default: NULL
+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200 (application/json)
    + Body

            [
                {
                    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-application-testing.cashier-data",
                    "id": "in.c-application-testing.cashier-data",
                    "name": "cashier-data",
                    "displayName": "cashier-data-displayName",
                    "transactional": false,
                    "primaryKey": [],
                    "indexedColumns": [],
                    "created": "2016-06-23T20:41:07+0200",
                    "lastImportDate": "2016-07-07T11:25:32+0200",
                    "lastChangeDate": "2016-07-07T11:25:34+0200",
                    "rowsCount": 18,
                    "dataSizeBytes": 12288,
                    "isAlias": false,
                    "isAliasable": true,
                    "attributes": [],
                    "columns": [
                        "time_spent_in_shop",
                        "number_of_items"
                    ],
                    "bucket": {
                        "uri": "https:\/\/connection.keboola.com\/v2\/storage\/buckets\/in.c-application-testing",
                        "id": "in.c-application-testing",
                        "name": "c-application-testing",
                        "displayName": "application-testing",
                        "stage": "in",
                        "description": "Main project storage",
                        "tables": "https:\/\/connection.keboola.com\/v2\/storage\/buckets\/in.c-application-testing\/tables",
                        "created": "2015-02-05T10:57:08+0100",
                        "lastChangeDate": "2017-02-12T10:36:15+0100",
                        "isReadOnly": false,
                        "dataSizeBytes": 685750272,
                        "rowsCount": 2438881,
                        "isMaintenance": false,
                        "backend": "snowflake",
                        "sharing": null,
                        "directAccessEnabled": false
                        "directAccessSchemaName": null
                    },
                    "columnMetadata": {
                        "number_of_items": [
                            {
                                "id": "207947778",
                                "key": "KBC.datatype.basetype",
                                "value": "INTEGER",
                                "provider": "user",
                                "timestamp": "2019-08-14T16:55:34+0200"
                            }
                        ]
                    }
                },
                {
                    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-application-testing.cashier-data-alias",
                    "id": "in.c-application-testing.cashier-data-alias",
                    "name": "cashier-data-alias",
                    "transactional": false,
                    "primaryKey": [],
                    "indexedColumns": [],
                    "created": "2016-06-23T20:41:38+0200",
                    "lastImportDate": "2016-07-07T11:26:03+0200",
                    "lastChangeDate": "2016-07-07T11:26:05+0200",
                    "rowsCount": 48,
                    "dataSizeBytes": 12288,
                    "isAlias": true,
                    "isAliasable": true,
                    "sourceTable": {
                        "id": "in.c-application-testing.cashier-data",
                        "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-application-testing.cashier-data",
                        "project": {
                            "id": 578,
                            "name": "Some source project"
                        },
                        "columnMetadata": {
                            "number_of_items": [
                                {
                                    "id": "207947778",
                                    "key": "KBC.datatype.basetype",
                                    "value": "INTEGER",
                                    "provider": "user",
                                    "timestamp": "2019-08-14T16:55:34+0200"
                                }
                            ]
                        }
                    },
                    "aliasColumnsAutoSync": true,
                    "attributes": [],
                    "columns": [
                        "time_spent_in_shop",
                        "number_of_items"
                    ],
                    "bucket": {
                        "uri": "https:\/\/connection.keboola.com\/v2\/storage\/buckets\/in.c-application-testing",
                        "id": "in.c-application-testing",
                        "name": "c-application-testing",
                        "displayName": "application-testing",
                        "stage": "in",
                        "description": "Main project storage",
                        "tables": "https:\/\/connection.keboola.com\/v2\/storage\/buckets\/in.c-application-testing\/tables",
                        "created": "2015-02-05T10:57:08+0100",
                        "lastChangeDate": "2017-02-12T10:36:15+0100",
                        "isReadOnly": false,
                        "dataSizeBytes": 685750272,
                        "rowsCount": 2438881,
                        "isMaintenance": false,
                        "backend": "snowflake",
                        "sharing": null,
                        "directAccessEnabled": false,
                        "directAccessSchemaName": null
                    },
                    "columnMetadata": []
                }
            ]


# Group Stats
## RunId [/v2/storage/stats?runId={runId}]
### Stats detail [GET]
Gets stats for a given Run Id. Provides the count of imported/exported tables and files in a specified run with durations.

+ Request
    + Headers

            X-StorageApi-Token: your_token

+ Response 200

            {
                "tables": {
                    "import": {
                        "other": 0,
                        "tables": [
                            {
                                "id": "out.c-futurelytics.order_lines",
                                "count": 1,
                                "durationTotalSecs": 103.53275680542
                            }
                        ]
                    },
                    "export": {
                        "other": 0,
                        "tables": []
                    }
                },
                "files": {
                    "total": {
                        "count": 5,
                        "dataSizeBytes": {
                            "total": 4916667019,
                            "mean": 983333403.8,
                            "max": 4552728847,
                            "min": 51
                        }
                    },
                    "tags": {
                        "other": 0,
                        "tags": []
                    }
                }
            }
# Group Triggers

###Create [POST /v2/storage/triggers/]
Created a trigger listeng on set of tables

+ Attributes
    + runWithTokenId (required, number) - Id of token used for running configured component
    + component: `orchestration` (required, enum[string]) - For now we support only 'orchestration'
    + configurationId (required, string) - Id of component configuration
    + coolDownPeriodMinutes (required, number) - Minimal cool down period before firing action again in minutes (min is 5 minutes)
    + tabledIds (required, object) - Array of tables ids
        + tableId (string) - Id of table (like "in.c-test.watched")
+ Request

    + Headers

            X-StorageApi-Token: your_token

    + Body

            runWithTokenId=123&component=orchestration&configurationId=123&coolDownPeriodMinutes=20&tableIds[0]=in.c-test.watched-1&tableIds[1]=in.c-prod.watched-5

+ Response 201 (application/json)

        {
            "id": "3",
            "runWithTokenId": 123,
            "component": "orchestration",
            "configurationId": "config-100",
            "lastRun": "2017-02-13T16:42:00+0100",
            "coolDownPeriodMinutes": 20,
            "creatorToken": {
                "id": 1,
                "description": "dev@keboola.com"
            },
            "tables": [
                {
                    "tableId": "in.c-test.watched-1"
                },
                {
                    "tableId": "in.c-prod.watched-5"
                }
            ]
        }

###List [GET /v2/storage/triggers/?component={component}&configurationId={configurationId}]
List all token of project with possible filters

+ Parameters
    + component (optional, string) - type of component. Now we supports only 'orchestration'
    + configurationId (optional, number) - id of component configuration

+ Response 200 (application/json)

        [
            {
                "id": "3",
                "runWithTokenId": 123,
                "component": "orchestration",
                "configurationId": "config-100",
                "lastRun": "2017-02-13T16:42:00+0100",
                "coolDownPeriodMinutes": 20,
                "creatorToken": {
                    "id": 1,
                    "description": "dev@keboola.com"
                },
                "tables": [
                    {
                        "tableId": "in.c-test.watched-1"
                    },
                    {
                        "tableId": "in.c-prod.watched-5"
                    }
                ]
            }
        ]

##Update or delete [/v2/storage/triggers/{id}]
###Update [PUT]
Updates an existing trigger
+ Parameters
    + id (required, number) - Id of trigger you want to update

+ Attributes
    + runWithTokenId (optional, number) - Id of token used for running configured component
    + component `orchestration` (optional, enum[string]) - For now we support only 'orchestrations'
    + configurationId (optional, string) - Id of component configuration
    + coolDownPeriodMinutes (optional, number) - Minimal cool down period before firing action again in minutes (min is 5 minutes)
    + tabledIds (optional, object) - Array of tables ids
        + tableId (string) - Id of table (like "in.c-test.watched")

+ Request

    + Headers

            X-StorageApi-Token: your_token

    + Body

            runWithTokenId=100

+ Response 200 (application/json)

        {
            "id": "3",
            "runWithTokenId": 123,
            "component": "orchestration",
            "configurationId": "config-100",
            "lastRun": "2017-02-13T16:42:00+0100",
            "coolDownPeriodMinutes": 20,
            "creatorToken": {
                "id": 1,
                "description": "dev@keboola.com"
            },
            "tables": [
                {
                    "tableId": "in.c-test.watched-1"
                },
                {
                    "tableId": "in.c-prod.watched-5"
                }
            ]
        }

###Delete [DELETE]
Deletes an existing trigger

+ Parameters

    + id (required, number) - Id of trigger you want to delete

+ Request

    + Headers

            X-StorageApi-Token: your_token

+ Response 204

# Group Webalize

###Webalize Display Name [POST /v2/storage/webalize/display-name]
Webalize string which you want to use as `displayName` for [tables](https://keboola.docs.apiary.io/#reference/tables/manage-tables/table-update)
and [buckets](https://keboola.docs.apiary.io/#reference/buckets/manage-bucket/bucket-update)
+ Attributes
    + displayName (required, string)

+ Request

    + Headers

            Content-Type: application/json

    + Body

            {
                "displayName": "My$$Display-Name"
            }

+ Response 200 (application/json)

        {
            "displayName": "My-Display-Name"
        }
